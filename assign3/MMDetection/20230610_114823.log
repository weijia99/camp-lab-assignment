2023/06/10 11:48:24 - mmengine - INFO - 
------------------------------------------------------------
System environment:
    sys.platform: linux
    Python: 3.9.7 (default, Sep 16 2021, 13:09:58) [GCC 7.5.0]
    CUDA available: True
    numpy_random_seed: 1703672676
    GPU 0,1: NVIDIA GeForce RTX 3090
    CUDA_HOME: /usr/local/cuda
    NVCC: Cuda compilation tools, release 11.1, V11.1.74
    GCC: gcc (Ubuntu 7.5.0-3ubuntu1~18.04) 7.5.0
    PyTorch: 1.12.1+cu113
    PyTorch compiling details: PyTorch built with:
  - GCC 9.3
  - C++ Version: 201402
  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.6.0 (Git Hash 52b5f107dd9cf10910aaa19cb47f3abf9b349815)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.3
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86
  - CuDNN 8.0.4  (built against CUDA 11.1)
    - Built with CuDNN 8.3.2
  - Magma 2.5.2
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.3, CUDNN_VERSION=8.3.2, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -fabi-version=11 -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Werror=cast-function-type -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.12.1, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=OFF, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, 

    TorchVision: 0.13.1+cu113
    OpenCV: 4.7.0
    MMEngine: 0.7.3

Runtime environment:
    cudnn_benchmark: False
    mp_cfg: {'mp_start_method': 'fork', 'opencv_num_threads': 0}
    dist_cfg: {'backend': 'nccl'}
    seed: None
    Distributed launcher: none
    Distributed training: False
    GPU number: 1
------------------------------------------------------------

2023/06/10 11:48:26 - mmengine - INFO - Config:
default_scope = 'mmdet'
default_hooks = dict(
    timer=dict(type='IterTimerHook'),
    logger=dict(type='LoggerHook', interval=5),
    param_scheduler=dict(type='ParamSchedulerHook'),
    checkpoint=dict(
        type='CheckpointHook', interval=10, max_keep_ckpts=2,
        save_best='auto'),
    sampler_seed=dict(type='DistSamplerSeedHook'),
    visualization=dict(type='DetVisualizationHook'))
env_cfg = dict(
    cudnn_benchmark=False,
    mp_cfg=dict(mp_start_method='fork', opencv_num_threads=0),
    dist_cfg=dict(backend='nccl'))
vis_backends = [dict(type='LocalVisBackend')]
visualizer = dict(
    type='DetLocalVisualizer',
    vis_backends=[dict(type='LocalVisBackend')],
    name='visualizer')
log_processor = dict(type='LogProcessor', window_size=50, by_epoch=True)
log_level = 'INFO'
load_from = 'https://download.openmmlab.com/mmdetection/v3.0/rtmdet/rtmdet_tiny_8xb32-300e_coco/rtmdet_tiny_8xb32-300e_coco_20220902_112414-78e30dcc.pth'
resume = False
train_cfg = dict(
    type='EpochBasedTrainLoop',
    max_epochs=100,
    val_interval=10,
    dynamic_intervals=[(280, 1)])
val_cfg = dict(type='ValLoop')
test_cfg = dict(type='TestLoop')
param_scheduler = [
    dict(type='LinearLR', start_factor=1e-05, by_epoch=False, begin=0, end=30),
    dict(
        type='CosineAnnealingLR',
        eta_min=5e-05,
        begin=50,
        end=100,
        T_max=50,
        by_epoch=True,
        convert_to_iter_based=True)
]
optim_wrapper = dict(
    type='OptimWrapper',
    optimizer=dict(type='AdamW', lr=0.001, weight_decay=0.05),
    paramwise_cfg=dict(
        norm_decay_mult=0, bias_decay_mult=0, bypass_duplicate=True))
auto_scale_lr = dict(enable=False, base_batch_size=16)
dataset_type = 'CocoDataset'
data_root = './data/balloon_dataset/balloon'
backend_args = None
train_pipeline = [
    dict(type='LoadImageFromFile', backend_args=None),
    dict(type='LoadAnnotations', with_bbox=True),
    dict(
        type='CachedMosaic',
        img_scale=(640, 640),
        pad_val=114.0,
        max_cached_images=20,
        random_pop=False),
    dict(
        type='RandomResize',
        scale=(1280, 1280),
        ratio_range=(0.5, 2.0),
        keep_ratio=True),
    dict(type='RandomCrop', crop_size=(640, 640)),
    dict(type='YOLOXHSVRandomAug'),
    dict(type='RandomFlip', prob=0.5),
    dict(type='Pad', size=(640, 640), pad_val=dict(img=(114, 114, 114))),
    dict(
        type='CachedMixUp',
        img_scale=(640, 640),
        ratio_range=(1.0, 1.0),
        max_cached_images=10,
        random_pop=False,
        pad_val=(114, 114, 114),
        prob=0.5),
    dict(type='PackDetInputs')
]
test_pipeline = [
    dict(type='LoadImageFromFile', backend_args=None),
    dict(type='Resize', scale=(640, 640), keep_ratio=True),
    dict(type='Pad', size=(640, 640), pad_val=dict(img=(114, 114, 114))),
    dict(
        type='PackDetInputs',
        meta_keys=('img_id', 'img_path', 'ori_shape', 'img_shape',
                   'scale_factor'))
]
train_dataloader = dict(
    batch_size=32,
    num_workers=4,
    persistent_workers=True,
    sampler=dict(type='DefaultSampler', shuffle=True),
    batch_sampler=None,
    dataset=dict(
        type='CocoDataset',
        data_root='./data/balloon_dataset/balloon',
        ann_file='coco_train.json',
        data_prefix=dict(img='train'),
        filter_cfg=dict(filter_empty_gt=True, min_size=32),
        pipeline=[
            dict(type='LoadImageFromFile', backend_args=None),
            dict(type='LoadAnnotations', with_bbox=True),
            dict(
                type='CachedMosaic',
                img_scale=(640, 640),
                pad_val=114.0,
                max_cached_images=20,
                random_pop=False),
            dict(
                type='RandomResize',
                scale=(1280, 1280),
                ratio_range=(0.5, 2.0),
                keep_ratio=True),
            dict(type='RandomCrop', crop_size=(640, 640)),
            dict(type='YOLOXHSVRandomAug'),
            dict(type='RandomFlip', prob=0.5),
            dict(
                type='Pad', size=(640, 640),
                pad_val=dict(img=(114, 114, 114))),
            dict(
                type='CachedMixUp',
                img_scale=(640, 640),
                ratio_range=(1.0, 1.0),
                max_cached_images=10,
                random_pop=False,
                pad_val=(114, 114, 114),
                prob=0.5),
            dict(type='PackDetInputs')
        ],
        backend_args=None,
        metainfo=dict(classes=('balloon', ), palette=[(220, 20, 60)])),
    pin_memory=False)
val_dataloader = dict(
    batch_size=1,
    num_workers=4,
    persistent_workers=True,
    drop_last=False,
    sampler=dict(type='DefaultSampler', shuffle=False),
    dataset=dict(
        type='CocoDataset',
        data_root='./data/balloon_dataset/balloon',
        ann_file='coco_val.json',
        data_prefix=dict(img='val'),
        test_mode=True,
        pipeline=[
            dict(type='LoadImageFromFile', backend_args=None),
            dict(type='Resize', scale=(640, 640), keep_ratio=True),
            dict(
                type='Pad', size=(640, 640),
                pad_val=dict(img=(114, 114, 114))),
            dict(
                type='PackDetInputs',
                meta_keys=('img_id', 'img_path', 'ori_shape', 'img_shape',
                           'scale_factor'))
        ],
        backend_args=None,
        metainfo=dict(classes=('balloon', ), palette=[(220, 20, 60)])))
test_dataloader = dict(
    batch_size=1,
    num_workers=4,
    persistent_workers=True,
    drop_last=False,
    sampler=dict(type='DefaultSampler', shuffle=False),
    dataset=dict(
        type='CocoDataset',
        data_root='./data/balloon_dataset/balloon',
        ann_file='coco_val.json',
        data_prefix=dict(img='val'),
        test_mode=True,
        pipeline=[
            dict(type='LoadImageFromFile', backend_args=None),
            dict(type='Resize', scale=(640, 640), keep_ratio=True),
            dict(
                type='Pad', size=(640, 640),
                pad_val=dict(img=(114, 114, 114))),
            dict(
                type='PackDetInputs',
                meta_keys=('img_id', 'img_path', 'ori_shape', 'img_shape',
                           'scale_factor'))
        ],
        backend_args=None,
        metainfo=dict(classes=('balloon', ), palette=[(220, 20, 60)])))
val_evaluator = dict(
    type='CocoMetric',
    ann_file='./data/balloon_dataset/balloon/coco_val.json',
    metric='bbox',
    format_only=False,
    backend_args=None,
    proposal_nums=(100, 1, 10))
test_evaluator = dict(
    type='CocoMetric',
    ann_file='./data/balloon_dataset/balloon/coco_val.json',
    metric='bbox',
    format_only=False,
    backend_args=None,
    proposal_nums=(100, 1, 10))
tta_model = dict(
    type='DetTTAModel',
    tta_cfg=dict(nms=dict(type='nms', iou_threshold=0.6), max_per_img=100))
img_scales = [(640, 640), (320, 320), (960, 960)]
tta_pipeline = [
    dict(type='LoadImageFromFile', backend_args=None),
    dict(
        type='TestTimeAug',
        transforms=[[{
            'type': 'Resize',
            'scale': (640, 640),
            'keep_ratio': True
        }, {
            'type': 'Resize',
            'scale': (320, 320),
            'keep_ratio': True
        }, {
            'type': 'Resize',
            'scale': (960, 960),
            'keep_ratio': True
        }],
                    [{
                        'type': 'RandomFlip',
                        'prob': 1.0
                    }, {
                        'type': 'RandomFlip',
                        'prob': 0.0
                    }],
                    [{
                        'type': 'Pad',
                        'size': (960, 960),
                        'pad_val': {
                            'img': (114, 114, 114)
                        }
                    }],
                    [{
                        'type':
                        'PackDetInputs',
                        'meta_keys':
                        ('img_id', 'img_path', 'ori_shape', 'img_shape',
                         'scale_factor', 'flip', 'flip_direction')
                    }]])
]
model = dict(
    type='RTMDet',
    data_preprocessor=dict(
        type='DetDataPreprocessor',
        mean=[103.53, 116.28, 123.675],
        std=[57.375, 57.12, 58.395],
        bgr_to_rgb=False,
        batch_augments=None),
    backbone=dict(
        type='CSPNeXt',
        arch='P5',
        expand_ratio=0.5,
        deepen_factor=0.167,
        widen_factor=0.375,
        channel_attention=True,
        norm_cfg=dict(type='SyncBN'),
        act_cfg=dict(type='SiLU', inplace=True),
        init_cfg=dict(
            type='Pretrained',
            prefix='backbone.',
            checkpoint=
            'https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth'
        ),
        frozen_stages=4),
    neck=dict(
        type='CSPNeXtPAFPN',
        in_channels=[96, 192, 384],
        out_channels=96,
        num_csp_blocks=1,
        expand_ratio=0.5,
        norm_cfg=dict(type='SyncBN'),
        act_cfg=dict(type='SiLU', inplace=True)),
    bbox_head=dict(
        type='RTMDetSepBNHead',
        num_classes=1,
        in_channels=96,
        stacked_convs=2,
        feat_channels=96,
        anchor_generator=dict(
            type='MlvlPointGenerator', offset=0, strides=[8, 16, 32]),
        bbox_coder=dict(type='DistancePointBBoxCoder'),
        loss_cls=dict(
            type='QualityFocalLoss',
            use_sigmoid=True,
            beta=2.0,
            loss_weight=1.0),
        loss_bbox=dict(type='GIoULoss', loss_weight=2.0),
        with_objectness=False,
        exp_on_reg=False,
        share_conv=True,
        pred_kernel_size=1,
        norm_cfg=dict(type='SyncBN'),
        act_cfg=dict(type='SiLU', inplace=True)),
    train_cfg=dict(
        assigner=dict(type='DynamicSoftLabelAssigner', topk=13),
        allowed_border=-1,
        pos_weight=-1,
        debug=False),
    test_cfg=dict(
        nms_pre=30000,
        min_bbox_size=0,
        score_thr=0.001,
        nms=dict(type='nms', iou_threshold=0.65),
        max_per_img=300))
train_pipeline_stage2 = [
    dict(type='LoadImageFromFile', backend_args=None),
    dict(type='LoadAnnotations', with_bbox=True),
    dict(
        type='RandomResize',
        scale=(640, 640),
        ratio_range=(0.5, 2.0),
        keep_ratio=True),
    dict(type='RandomCrop', crop_size=(640, 640)),
    dict(type='YOLOXHSVRandomAug'),
    dict(type='RandomFlip', prob=0.5),
    dict(type='Pad', size=(640, 640), pad_val=dict(img=(114, 114, 114))),
    dict(type='PackDetInputs')
]
max_epochs = 100
stage2_num_epochs = 20
base_lr = 0.001
interval = 10
custom_hooks = [
    dict(
        type='EMAHook',
        ema_type='ExpMomentumEMA',
        momentum=0.0002,
        update_buffers=True,
        priority=49),
    dict(
        type='PipelineSwitchHook',
        switch_epoch=95,
        switch_pipeline=[
            dict(type='LoadImageFromFile', backend_args=None),
            dict(type='LoadAnnotations', with_bbox=True),
            dict(
                type='RandomResize',
                scale=(640, 640),
                ratio_range=(0.5, 2.0),
                keep_ratio=True),
            dict(type='RandomCrop', crop_size=(640, 640)),
            dict(type='YOLOXHSVRandomAug'),
            dict(type='RandomFlip', prob=0.5),
            dict(
                type='Pad', size=(640, 640),
                pad_val=dict(img=(114, 114, 114))),
            dict(type='PackDetInputs')
        ])
]
checkpoint = 'https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth'
metainfo = dict(classes=('balloon', ), palette=[(220, 20, 60)])
num_classes = 1
train_batch_size_per_gpu = 32
train_num_workers = 4
val_batch_size_per_gpu = 1
val_num_workers = 4
num_epochs_stage2 = 5
launcher = 'none'
work_dir = './work_dirs/rtmdet_tiny_1xb12-40e_balloon'

2023/06/10 11:48:31 - mmengine - INFO - Distributed training is not used, all SyncBatchNorm (SyncBN) layers in the model will be automatically reverted to BatchNormXd layers if they are used.
2023/06/10 11:48:31 - mmengine - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) RuntimeInfoHook                    
(49          ) EMAHook                            
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_load_checkpoint:
(49          ) EMAHook                            
 -------------------- 
before_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(49          ) EMAHook                            
(NORMAL      ) IterTimerHook                      
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DistSamplerSeedHook                
(NORMAL      ) PipelineSwitchHook                 
 -------------------- 
before_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(49          ) EMAHook                            
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) IterTimerHook                      
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_val_epoch:
(49          ) EMAHook                            
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_val_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_val_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DetVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_val_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(49          ) EMAHook                            
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_save_checkpoint:
(49          ) EMAHook                            
 -------------------- 
after_train:
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_test_epoch:
(49          ) EMAHook                            
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_test_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_test_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DetVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(49          ) EMAHook                            
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_run:
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
2023/06/10 11:48:32 - mmengine - INFO - paramwise_options -- backbone.stem.0.bn.weight:weight_decay=0.0
2023/06/10 11:48:32 - mmengine - INFO - paramwise_options -- backbone.stem.0.bn.bias:weight_decay=0.0
2023/06/10 11:48:32 - mmengine - INFO - paramwise_options -- backbone.stem.1.bn.weight:weight_decay=0.0
2023/06/10 11:48:32 - mmengine - INFO - paramwise_options -- backbone.stem.1.bn.bias:weight_decay=0.0
2023/06/10 11:48:32 - mmengine - INFO - paramwise_options -- backbone.stem.2.bn.weight:weight_decay=0.0
2023/06/10 11:48:32 - mmengine - INFO - paramwise_options -- backbone.stem.2.bn.bias:weight_decay=0.0
2023/06/10 11:48:32 - mmengine - INFO - paramwise_options -- backbone.stage1.0.bn.weight:weight_decay=0.0
2023/06/10 11:48:32 - mmengine - INFO - paramwise_options -- backbone.stage1.0.bn.bias:weight_decay=0.0
2023/06/10 11:48:32 - mmengine - INFO - paramwise_options -- backbone.stage1.1.main_conv.bn.weight:weight_decay=0.0
2023/06/10 11:48:32 - mmengine - INFO - paramwise_options -- backbone.stage1.1.main_conv.bn.bias:weight_decay=0.0
2023/06/10 11:48:32 - mmengine - INFO - paramwise_options -- backbone.stage1.1.short_conv.bn.weight:weight_decay=0.0
2023/06/10 11:48:32 - mmengine - INFO - paramwise_options -- backbone.stage1.1.short_conv.bn.bias:weight_decay=0.0
2023/06/10 11:48:32 - mmengine - INFO - paramwise_options -- backbone.stage1.1.final_conv.bn.weight:weight_decay=0.0
2023/06/10 11:48:32 - mmengine - INFO - paramwise_options -- backbone.stage1.1.final_conv.bn.bias:weight_decay=0.0
2023/06/10 11:48:32 - mmengine - INFO - paramwise_options -- backbone.stage1.1.blocks.0.conv1.bn.weight:weight_decay=0.0
2023/06/10 11:48:32 - mmengine - INFO - paramwise_options -- backbone.stage1.1.blocks.0.conv1.bn.bias:weight_decay=0.0
2023/06/10 11:48:32 - mmengine - INFO - paramwise_options -- backbone.stage1.1.blocks.0.conv2.depthwise_conv.bn.weight:weight_decay=0.0
2023/06/10 11:48:32 - mmengine - INFO - paramwise_options -- backbone.stage1.1.blocks.0.conv2.depthwise_conv.bn.bias:weight_decay=0.0
2023/06/10 11:48:32 - mmengine - INFO - paramwise_options -- backbone.stage1.1.blocks.0.conv2.pointwise_conv.bn.weight:weight_decay=0.0
2023/06/10 11:48:32 - mmengine - INFO - paramwise_options -- backbone.stage1.1.blocks.0.conv2.pointwise_conv.bn.bias:weight_decay=0.0
2023/06/10 11:48:32 - mmengine - INFO - paramwise_options -- backbone.stage1.1.attention.fc.bias:weight_decay=0.0
2023/06/10 11:48:32 - mmengine - INFO - paramwise_options -- backbone.stage2.0.bn.weight:weight_decay=0.0
2023/06/10 11:48:32 - mmengine - INFO - paramwise_options -- backbone.stage2.0.bn.bias:weight_decay=0.0
2023/06/10 11:48:32 - mmengine - INFO - paramwise_options -- backbone.stage2.1.main_conv.bn.weight:weight_decay=0.0
2023/06/10 11:48:32 - mmengine - INFO - paramwise_options -- backbone.stage2.1.main_conv.bn.bias:weight_decay=0.0
2023/06/10 11:48:32 - mmengine - INFO - paramwise_options -- backbone.stage2.1.short_conv.bn.weight:weight_decay=0.0
2023/06/10 11:48:32 - mmengine - INFO - paramwise_options -- backbone.stage2.1.short_conv.bn.bias:weight_decay=0.0
2023/06/10 11:48:32 - mmengine - INFO - paramwise_options -- backbone.stage2.1.final_conv.bn.weight:weight_decay=0.0
2023/06/10 11:48:32 - mmengine - INFO - paramwise_options -- backbone.stage2.1.final_conv.bn.bias:weight_decay=0.0
2023/06/10 11:48:32 - mmengine - INFO - paramwise_options -- backbone.stage2.1.blocks.0.conv1.bn.weight:weight_decay=0.0
2023/06/10 11:48:32 - mmengine - INFO - paramwise_options -- backbone.stage2.1.blocks.0.conv1.bn.bias:weight_decay=0.0
2023/06/10 11:48:32 - mmengine - INFO - paramwise_options -- backbone.stage2.1.blocks.0.conv2.depthwise_conv.bn.weight:weight_decay=0.0
2023/06/10 11:48:32 - mmengine - INFO - paramwise_options -- backbone.stage2.1.blocks.0.conv2.depthwise_conv.bn.bias:weight_decay=0.0
2023/06/10 11:48:32 - mmengine - INFO - paramwise_options -- backbone.stage2.1.blocks.0.conv2.pointwise_conv.bn.weight:weight_decay=0.0
2023/06/10 11:48:32 - mmengine - INFO - paramwise_options -- backbone.stage2.1.blocks.0.conv2.pointwise_conv.bn.bias:weight_decay=0.0
2023/06/10 11:48:32 - mmengine - INFO - paramwise_options -- backbone.stage2.1.attention.fc.bias:weight_decay=0.0
2023/06/10 11:48:32 - mmengine - INFO - paramwise_options -- backbone.stage3.0.bn.weight:weight_decay=0.0
2023/06/10 11:48:32 - mmengine - INFO - paramwise_options -- backbone.stage3.0.bn.bias:weight_decay=0.0
2023/06/10 11:48:32 - mmengine - INFO - paramwise_options -- backbone.stage3.1.main_conv.bn.weight:weight_decay=0.0
2023/06/10 11:48:32 - mmengine - INFO - paramwise_options -- backbone.stage3.1.main_conv.bn.bias:weight_decay=0.0
2023/06/10 11:48:32 - mmengine - INFO - paramwise_options -- backbone.stage3.1.short_conv.bn.weight:weight_decay=0.0
2023/06/10 11:48:32 - mmengine - INFO - paramwise_options -- backbone.stage3.1.short_conv.bn.bias:weight_decay=0.0
2023/06/10 11:48:32 - mmengine - INFO - paramwise_options -- backbone.stage3.1.final_conv.bn.weight:weight_decay=0.0
2023/06/10 11:48:32 - mmengine - INFO - paramwise_options -- backbone.stage3.1.final_conv.bn.bias:weight_decay=0.0
2023/06/10 11:48:32 - mmengine - INFO - paramwise_options -- backbone.stage3.1.blocks.0.conv1.bn.weight:weight_decay=0.0
2023/06/10 11:48:32 - mmengine - INFO - paramwise_options -- backbone.stage3.1.blocks.0.conv1.bn.bias:weight_decay=0.0
2023/06/10 11:48:32 - mmengine - INFO - paramwise_options -- backbone.stage3.1.blocks.0.conv2.depthwise_conv.bn.weight:weight_decay=0.0
2023/06/10 11:48:32 - mmengine - INFO - paramwise_options -- backbone.stage3.1.blocks.0.conv2.depthwise_conv.bn.bias:weight_decay=0.0
2023/06/10 11:48:32 - mmengine - INFO - paramwise_options -- backbone.stage3.1.blocks.0.conv2.pointwise_conv.bn.weight:weight_decay=0.0
2023/06/10 11:48:32 - mmengine - INFO - paramwise_options -- backbone.stage3.1.blocks.0.conv2.pointwise_conv.bn.bias:weight_decay=0.0
2023/06/10 11:48:32 - mmengine - INFO - paramwise_options -- backbone.stage3.1.attention.fc.bias:weight_decay=0.0
2023/06/10 11:48:32 - mmengine - INFO - paramwise_options -- backbone.stage4.0.bn.weight:weight_decay=0.0
2023/06/10 11:48:32 - mmengine - INFO - paramwise_options -- backbone.stage4.0.bn.bias:weight_decay=0.0
2023/06/10 11:48:32 - mmengine - INFO - paramwise_options -- backbone.stage4.1.conv1.bn.weight:weight_decay=0.0
2023/06/10 11:48:32 - mmengine - INFO - paramwise_options -- backbone.stage4.1.conv1.bn.bias:weight_decay=0.0
2023/06/10 11:48:32 - mmengine - INFO - paramwise_options -- backbone.stage4.1.conv2.bn.weight:weight_decay=0.0
2023/06/10 11:48:32 - mmengine - INFO - paramwise_options -- backbone.stage4.1.conv2.bn.bias:weight_decay=0.0
2023/06/10 11:48:32 - mmengine - INFO - paramwise_options -- backbone.stage4.2.main_conv.bn.weight:weight_decay=0.0
2023/06/10 11:48:32 - mmengine - INFO - paramwise_options -- backbone.stage4.2.main_conv.bn.bias:weight_decay=0.0
2023/06/10 11:48:32 - mmengine - INFO - paramwise_options -- backbone.stage4.2.short_conv.bn.weight:weight_decay=0.0
2023/06/10 11:48:32 - mmengine - INFO - paramwise_options -- backbone.stage4.2.short_conv.bn.bias:weight_decay=0.0
2023/06/10 11:48:32 - mmengine - INFO - paramwise_options -- backbone.stage4.2.final_conv.bn.weight:weight_decay=0.0
2023/06/10 11:48:32 - mmengine - INFO - paramwise_options -- backbone.stage4.2.final_conv.bn.bias:weight_decay=0.0
2023/06/10 11:48:32 - mmengine - INFO - paramwise_options -- backbone.stage4.2.blocks.0.conv1.bn.weight:weight_decay=0.0
2023/06/10 11:48:32 - mmengine - INFO - paramwise_options -- backbone.stage4.2.blocks.0.conv1.bn.bias:weight_decay=0.0
2023/06/10 11:48:32 - mmengine - INFO - paramwise_options -- backbone.stage4.2.blocks.0.conv2.depthwise_conv.bn.weight:weight_decay=0.0
2023/06/10 11:48:32 - mmengine - INFO - paramwise_options -- backbone.stage4.2.blocks.0.conv2.depthwise_conv.bn.bias:weight_decay=0.0
2023/06/10 11:48:32 - mmengine - INFO - paramwise_options -- backbone.stage4.2.blocks.0.conv2.pointwise_conv.bn.weight:weight_decay=0.0
2023/06/10 11:48:32 - mmengine - INFO - paramwise_options -- backbone.stage4.2.blocks.0.conv2.pointwise_conv.bn.bias:weight_decay=0.0
2023/06/10 11:48:32 - mmengine - INFO - paramwise_options -- backbone.stage4.2.attention.fc.bias:weight_decay=0.0
2023/06/10 11:48:32 - mmengine - INFO - paramwise_options -- neck.reduce_layers.0.bn.weight:weight_decay=0.0
2023/06/10 11:48:32 - mmengine - INFO - paramwise_options -- neck.reduce_layers.0.bn.bias:weight_decay=0.0
2023/06/10 11:48:32 - mmengine - INFO - paramwise_options -- neck.reduce_layers.1.bn.weight:weight_decay=0.0
2023/06/10 11:48:32 - mmengine - INFO - paramwise_options -- neck.reduce_layers.1.bn.bias:weight_decay=0.0
2023/06/10 11:48:32 - mmengine - INFO - paramwise_options -- neck.top_down_blocks.0.main_conv.bn.weight:weight_decay=0.0
2023/06/10 11:48:32 - mmengine - INFO - paramwise_options -- neck.top_down_blocks.0.main_conv.bn.bias:weight_decay=0.0
2023/06/10 11:48:32 - mmengine - INFO - paramwise_options -- neck.top_down_blocks.0.short_conv.bn.weight:weight_decay=0.0
2023/06/10 11:48:32 - mmengine - INFO - paramwise_options -- neck.top_down_blocks.0.short_conv.bn.bias:weight_decay=0.0
2023/06/10 11:48:32 - mmengine - INFO - paramwise_options -- neck.top_down_blocks.0.final_conv.bn.weight:weight_decay=0.0
2023/06/10 11:48:32 - mmengine - INFO - paramwise_options -- neck.top_down_blocks.0.final_conv.bn.bias:weight_decay=0.0
2023/06/10 11:48:32 - mmengine - INFO - paramwise_options -- neck.top_down_blocks.0.blocks.0.conv1.bn.weight:weight_decay=0.0
2023/06/10 11:48:32 - mmengine - INFO - paramwise_options -- neck.top_down_blocks.0.blocks.0.conv1.bn.bias:weight_decay=0.0
2023/06/10 11:48:32 - mmengine - INFO - paramwise_options -- neck.top_down_blocks.0.blocks.0.conv2.depthwise_conv.bn.weight:weight_decay=0.0
2023/06/10 11:48:32 - mmengine - INFO - paramwise_options -- neck.top_down_blocks.0.blocks.0.conv2.depthwise_conv.bn.bias:weight_decay=0.0
2023/06/10 11:48:32 - mmengine - INFO - paramwise_options -- neck.top_down_blocks.0.blocks.0.conv2.pointwise_conv.bn.weight:weight_decay=0.0
2023/06/10 11:48:32 - mmengine - INFO - paramwise_options -- neck.top_down_blocks.0.blocks.0.conv2.pointwise_conv.bn.bias:weight_decay=0.0
2023/06/10 11:48:32 - mmengine - INFO - paramwise_options -- neck.top_down_blocks.1.main_conv.bn.weight:weight_decay=0.0
2023/06/10 11:48:32 - mmengine - INFO - paramwise_options -- neck.top_down_blocks.1.main_conv.bn.bias:weight_decay=0.0
2023/06/10 11:48:32 - mmengine - INFO - paramwise_options -- neck.top_down_blocks.1.short_conv.bn.weight:weight_decay=0.0
2023/06/10 11:48:32 - mmengine - INFO - paramwise_options -- neck.top_down_blocks.1.short_conv.bn.bias:weight_decay=0.0
2023/06/10 11:48:32 - mmengine - INFO - paramwise_options -- neck.top_down_blocks.1.final_conv.bn.weight:weight_decay=0.0
2023/06/10 11:48:32 - mmengine - INFO - paramwise_options -- neck.top_down_blocks.1.final_conv.bn.bias:weight_decay=0.0
2023/06/10 11:48:32 - mmengine - INFO - paramwise_options -- neck.top_down_blocks.1.blocks.0.conv1.bn.weight:weight_decay=0.0
2023/06/10 11:48:32 - mmengine - INFO - paramwise_options -- neck.top_down_blocks.1.blocks.0.conv1.bn.bias:weight_decay=0.0
2023/06/10 11:48:32 - mmengine - INFO - paramwise_options -- neck.top_down_blocks.1.blocks.0.conv2.depthwise_conv.bn.weight:weight_decay=0.0
2023/06/10 11:48:32 - mmengine - INFO - paramwise_options -- neck.top_down_blocks.1.blocks.0.conv2.depthwise_conv.bn.bias:weight_decay=0.0
2023/06/10 11:48:32 - mmengine - INFO - paramwise_options -- neck.top_down_blocks.1.blocks.0.conv2.pointwise_conv.bn.weight:weight_decay=0.0
2023/06/10 11:48:32 - mmengine - INFO - paramwise_options -- neck.top_down_blocks.1.blocks.0.conv2.pointwise_conv.bn.bias:weight_decay=0.0
2023/06/10 11:48:32 - mmengine - INFO - paramwise_options -- neck.downsamples.0.bn.weight:weight_decay=0.0
2023/06/10 11:48:32 - mmengine - INFO - paramwise_options -- neck.downsamples.0.bn.bias:weight_decay=0.0
2023/06/10 11:48:32 - mmengine - INFO - paramwise_options -- neck.downsamples.1.bn.weight:weight_decay=0.0
2023/06/10 11:48:32 - mmengine - INFO - paramwise_options -- neck.downsamples.1.bn.bias:weight_decay=0.0
2023/06/10 11:48:32 - mmengine - INFO - paramwise_options -- neck.bottom_up_blocks.0.main_conv.bn.weight:weight_decay=0.0
2023/06/10 11:48:32 - mmengine - INFO - paramwise_options -- neck.bottom_up_blocks.0.main_conv.bn.bias:weight_decay=0.0
2023/06/10 11:48:32 - mmengine - INFO - paramwise_options -- neck.bottom_up_blocks.0.short_conv.bn.weight:weight_decay=0.0
2023/06/10 11:48:32 - mmengine - INFO - paramwise_options -- neck.bottom_up_blocks.0.short_conv.bn.bias:weight_decay=0.0
2023/06/10 11:48:32 - mmengine - INFO - paramwise_options -- neck.bottom_up_blocks.0.final_conv.bn.weight:weight_decay=0.0
2023/06/10 11:48:32 - mmengine - INFO - paramwise_options -- neck.bottom_up_blocks.0.final_conv.bn.bias:weight_decay=0.0
2023/06/10 11:48:32 - mmengine - INFO - paramwise_options -- neck.bottom_up_blocks.0.blocks.0.conv1.bn.weight:weight_decay=0.0
2023/06/10 11:48:32 - mmengine - INFO - paramwise_options -- neck.bottom_up_blocks.0.blocks.0.conv1.bn.bias:weight_decay=0.0
2023/06/10 11:48:32 - mmengine - INFO - paramwise_options -- neck.bottom_up_blocks.0.blocks.0.conv2.depthwise_conv.bn.weight:weight_decay=0.0
2023/06/10 11:48:32 - mmengine - INFO - paramwise_options -- neck.bottom_up_blocks.0.blocks.0.conv2.depthwise_conv.bn.bias:weight_decay=0.0
2023/06/10 11:48:32 - mmengine - INFO - paramwise_options -- neck.bottom_up_blocks.0.blocks.0.conv2.pointwise_conv.bn.weight:weight_decay=0.0
2023/06/10 11:48:32 - mmengine - INFO - paramwise_options -- neck.bottom_up_blocks.0.blocks.0.conv2.pointwise_conv.bn.bias:weight_decay=0.0
2023/06/10 11:48:32 - mmengine - INFO - paramwise_options -- neck.bottom_up_blocks.1.main_conv.bn.weight:weight_decay=0.0
2023/06/10 11:48:32 - mmengine - INFO - paramwise_options -- neck.bottom_up_blocks.1.main_conv.bn.bias:weight_decay=0.0
2023/06/10 11:48:32 - mmengine - INFO - paramwise_options -- neck.bottom_up_blocks.1.short_conv.bn.weight:weight_decay=0.0
2023/06/10 11:48:32 - mmengine - INFO - paramwise_options -- neck.bottom_up_blocks.1.short_conv.bn.bias:weight_decay=0.0
2023/06/10 11:48:32 - mmengine - INFO - paramwise_options -- neck.bottom_up_blocks.1.final_conv.bn.weight:weight_decay=0.0
2023/06/10 11:48:32 - mmengine - INFO - paramwise_options -- neck.bottom_up_blocks.1.final_conv.bn.bias:weight_decay=0.0
2023/06/10 11:48:32 - mmengine - INFO - paramwise_options -- neck.bottom_up_blocks.1.blocks.0.conv1.bn.weight:weight_decay=0.0
2023/06/10 11:48:32 - mmengine - INFO - paramwise_options -- neck.bottom_up_blocks.1.blocks.0.conv1.bn.bias:weight_decay=0.0
2023/06/10 11:48:32 - mmengine - INFO - paramwise_options -- neck.bottom_up_blocks.1.blocks.0.conv2.depthwise_conv.bn.weight:weight_decay=0.0
2023/06/10 11:48:32 - mmengine - INFO - paramwise_options -- neck.bottom_up_blocks.1.blocks.0.conv2.depthwise_conv.bn.bias:weight_decay=0.0
2023/06/10 11:48:32 - mmengine - INFO - paramwise_options -- neck.bottom_up_blocks.1.blocks.0.conv2.pointwise_conv.bn.weight:weight_decay=0.0
2023/06/10 11:48:32 - mmengine - INFO - paramwise_options -- neck.bottom_up_blocks.1.blocks.0.conv2.pointwise_conv.bn.bias:weight_decay=0.0
2023/06/10 11:48:32 - mmengine - INFO - paramwise_options -- neck.out_convs.0.bn.weight:weight_decay=0.0
2023/06/10 11:48:32 - mmengine - INFO - paramwise_options -- neck.out_convs.0.bn.bias:weight_decay=0.0
2023/06/10 11:48:32 - mmengine - INFO - paramwise_options -- neck.out_convs.1.bn.weight:weight_decay=0.0
2023/06/10 11:48:32 - mmengine - INFO - paramwise_options -- neck.out_convs.1.bn.bias:weight_decay=0.0
2023/06/10 11:48:32 - mmengine - INFO - paramwise_options -- neck.out_convs.2.bn.weight:weight_decay=0.0
2023/06/10 11:48:32 - mmengine - INFO - paramwise_options -- neck.out_convs.2.bn.bias:weight_decay=0.0
2023/06/10 11:48:32 - mmengine - INFO - paramwise_options -- bbox_head.cls_convs.0.0.bn.weight:weight_decay=0.0
2023/06/10 11:48:32 - mmengine - INFO - paramwise_options -- bbox_head.cls_convs.0.0.bn.bias:weight_decay=0.0
2023/06/10 11:48:32 - mmengine - INFO - paramwise_options -- bbox_head.cls_convs.0.1.bn.weight:weight_decay=0.0
2023/06/10 11:48:32 - mmengine - INFO - paramwise_options -- bbox_head.cls_convs.0.1.bn.bias:weight_decay=0.0
2023/06/10 11:48:32 - mmengine - WARNING - bbox_head.cls_convs.1.0.conv is duplicate. It is skipped since bypass_duplicate=True
2023/06/10 11:48:32 - mmengine - INFO - paramwise_options -- bbox_head.cls_convs.1.0.bn.weight:weight_decay=0.0
2023/06/10 11:48:32 - mmengine - INFO - paramwise_options -- bbox_head.cls_convs.1.0.bn.bias:weight_decay=0.0
2023/06/10 11:48:32 - mmengine - WARNING - bbox_head.cls_convs.1.1.conv is duplicate. It is skipped since bypass_duplicate=True
2023/06/10 11:48:32 - mmengine - INFO - paramwise_options -- bbox_head.cls_convs.1.1.bn.weight:weight_decay=0.0
2023/06/10 11:48:32 - mmengine - INFO - paramwise_options -- bbox_head.cls_convs.1.1.bn.bias:weight_decay=0.0
2023/06/10 11:48:32 - mmengine - WARNING - bbox_head.cls_convs.2.0.conv is duplicate. It is skipped since bypass_duplicate=True
2023/06/10 11:48:32 - mmengine - INFO - paramwise_options -- bbox_head.cls_convs.2.0.bn.weight:weight_decay=0.0
2023/06/10 11:48:32 - mmengine - INFO - paramwise_options -- bbox_head.cls_convs.2.0.bn.bias:weight_decay=0.0
2023/06/10 11:48:32 - mmengine - WARNING - bbox_head.cls_convs.2.1.conv is duplicate. It is skipped since bypass_duplicate=True
2023/06/10 11:48:32 - mmengine - INFO - paramwise_options -- bbox_head.cls_convs.2.1.bn.weight:weight_decay=0.0
2023/06/10 11:48:32 - mmengine - INFO - paramwise_options -- bbox_head.cls_convs.2.1.bn.bias:weight_decay=0.0
2023/06/10 11:48:32 - mmengine - INFO - paramwise_options -- bbox_head.reg_convs.0.0.bn.weight:weight_decay=0.0
2023/06/10 11:48:32 - mmengine - INFO - paramwise_options -- bbox_head.reg_convs.0.0.bn.bias:weight_decay=0.0
2023/06/10 11:48:32 - mmengine - INFO - paramwise_options -- bbox_head.reg_convs.0.1.bn.weight:weight_decay=0.0
2023/06/10 11:48:32 - mmengine - INFO - paramwise_options -- bbox_head.reg_convs.0.1.bn.bias:weight_decay=0.0
2023/06/10 11:48:32 - mmengine - WARNING - bbox_head.reg_convs.1.0.conv is duplicate. It is skipped since bypass_duplicate=True
2023/06/10 11:48:32 - mmengine - INFO - paramwise_options -- bbox_head.reg_convs.1.0.bn.weight:weight_decay=0.0
2023/06/10 11:48:32 - mmengine - INFO - paramwise_options -- bbox_head.reg_convs.1.0.bn.bias:weight_decay=0.0
2023/06/10 11:48:32 - mmengine - WARNING - bbox_head.reg_convs.1.1.conv is duplicate. It is skipped since bypass_duplicate=True
2023/06/10 11:48:32 - mmengine - INFO - paramwise_options -- bbox_head.reg_convs.1.1.bn.weight:weight_decay=0.0
2023/06/10 11:48:32 - mmengine - INFO - paramwise_options -- bbox_head.reg_convs.1.1.bn.bias:weight_decay=0.0
2023/06/10 11:48:32 - mmengine - WARNING - bbox_head.reg_convs.2.0.conv is duplicate. It is skipped since bypass_duplicate=True
2023/06/10 11:48:32 - mmengine - INFO - paramwise_options -- bbox_head.reg_convs.2.0.bn.weight:weight_decay=0.0
2023/06/10 11:48:32 - mmengine - INFO - paramwise_options -- bbox_head.reg_convs.2.0.bn.bias:weight_decay=0.0
2023/06/10 11:48:32 - mmengine - WARNING - bbox_head.reg_convs.2.1.conv is duplicate. It is skipped since bypass_duplicate=True
2023/06/10 11:48:32 - mmengine - INFO - paramwise_options -- bbox_head.reg_convs.2.1.bn.weight:weight_decay=0.0
2023/06/10 11:48:32 - mmengine - INFO - paramwise_options -- bbox_head.reg_convs.2.1.bn.bias:weight_decay=0.0
2023/06/10 11:48:32 - mmengine - INFO - paramwise_options -- bbox_head.rtm_cls.0.bias:weight_decay=0.0
2023/06/10 11:48:32 - mmengine - INFO - paramwise_options -- bbox_head.rtm_cls.1.bias:weight_decay=0.0
2023/06/10 11:48:32 - mmengine - INFO - paramwise_options -- bbox_head.rtm_cls.2.bias:weight_decay=0.0
2023/06/10 11:48:32 - mmengine - INFO - paramwise_options -- bbox_head.rtm_reg.0.bias:weight_decay=0.0
2023/06/10 11:48:32 - mmengine - INFO - paramwise_options -- bbox_head.rtm_reg.1.bias:weight_decay=0.0
2023/06/10 11:48:32 - mmengine - INFO - paramwise_options -- bbox_head.rtm_reg.2.bias:weight_decay=0.0
2023/06/10 11:48:34 - mmengine - INFO - load backbone. in model from: https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth
Name of parameter - Initialization information

backbone.stem.0.conv.weight - torch.Size([12, 3, 3, 3]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stem.0.bn.weight - torch.Size([12]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stem.0.bn.bias - torch.Size([12]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stem.1.conv.weight - torch.Size([12, 12, 3, 3]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stem.1.bn.weight - torch.Size([12]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stem.1.bn.bias - torch.Size([12]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stem.2.conv.weight - torch.Size([24, 12, 3, 3]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stem.2.bn.weight - torch.Size([24]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stem.2.bn.bias - torch.Size([24]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage1.0.conv.weight - torch.Size([48, 24, 3, 3]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage1.0.bn.weight - torch.Size([48]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage1.0.bn.bias - torch.Size([48]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage1.1.main_conv.conv.weight - torch.Size([24, 48, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage1.1.main_conv.bn.weight - torch.Size([24]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage1.1.main_conv.bn.bias - torch.Size([24]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage1.1.short_conv.conv.weight - torch.Size([24, 48, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage1.1.short_conv.bn.weight - torch.Size([24]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage1.1.short_conv.bn.bias - torch.Size([24]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage1.1.final_conv.conv.weight - torch.Size([48, 48, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage1.1.final_conv.bn.weight - torch.Size([48]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage1.1.final_conv.bn.bias - torch.Size([48]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage1.1.blocks.0.conv1.conv.weight - torch.Size([24, 24, 3, 3]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage1.1.blocks.0.conv1.bn.weight - torch.Size([24]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage1.1.blocks.0.conv1.bn.bias - torch.Size([24]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage1.1.blocks.0.conv2.depthwise_conv.conv.weight - torch.Size([24, 1, 5, 5]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage1.1.blocks.0.conv2.depthwise_conv.bn.weight - torch.Size([24]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage1.1.blocks.0.conv2.depthwise_conv.bn.bias - torch.Size([24]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage1.1.blocks.0.conv2.pointwise_conv.conv.weight - torch.Size([24, 24, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage1.1.blocks.0.conv2.pointwise_conv.bn.weight - torch.Size([24]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage1.1.blocks.0.conv2.pointwise_conv.bn.bias - torch.Size([24]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage1.1.attention.fc.weight - torch.Size([48, 48, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage1.1.attention.fc.bias - torch.Size([48]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage2.0.conv.weight - torch.Size([96, 48, 3, 3]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage2.0.bn.weight - torch.Size([96]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage2.0.bn.bias - torch.Size([96]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage2.1.main_conv.conv.weight - torch.Size([48, 96, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage2.1.main_conv.bn.weight - torch.Size([48]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage2.1.main_conv.bn.bias - torch.Size([48]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage2.1.short_conv.conv.weight - torch.Size([48, 96, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage2.1.short_conv.bn.weight - torch.Size([48]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage2.1.short_conv.bn.bias - torch.Size([48]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage2.1.final_conv.conv.weight - torch.Size([96, 96, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage2.1.final_conv.bn.weight - torch.Size([96]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage2.1.final_conv.bn.bias - torch.Size([96]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage2.1.blocks.0.conv1.conv.weight - torch.Size([48, 48, 3, 3]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage2.1.blocks.0.conv1.bn.weight - torch.Size([48]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage2.1.blocks.0.conv1.bn.bias - torch.Size([48]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage2.1.blocks.0.conv2.depthwise_conv.conv.weight - torch.Size([48, 1, 5, 5]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage2.1.blocks.0.conv2.depthwise_conv.bn.weight - torch.Size([48]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage2.1.blocks.0.conv2.depthwise_conv.bn.bias - torch.Size([48]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage2.1.blocks.0.conv2.pointwise_conv.conv.weight - torch.Size([48, 48, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage2.1.blocks.0.conv2.pointwise_conv.bn.weight - torch.Size([48]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage2.1.blocks.0.conv2.pointwise_conv.bn.bias - torch.Size([48]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage2.1.attention.fc.weight - torch.Size([96, 96, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage2.1.attention.fc.bias - torch.Size([96]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage3.0.conv.weight - torch.Size([192, 96, 3, 3]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage3.0.bn.weight - torch.Size([192]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage3.0.bn.bias - torch.Size([192]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage3.1.main_conv.conv.weight - torch.Size([96, 192, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage3.1.main_conv.bn.weight - torch.Size([96]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage3.1.main_conv.bn.bias - torch.Size([96]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage3.1.short_conv.conv.weight - torch.Size([96, 192, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage3.1.short_conv.bn.weight - torch.Size([96]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage3.1.short_conv.bn.bias - torch.Size([96]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage3.1.final_conv.conv.weight - torch.Size([192, 192, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage3.1.final_conv.bn.weight - torch.Size([192]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage3.1.final_conv.bn.bias - torch.Size([192]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage3.1.blocks.0.conv1.conv.weight - torch.Size([96, 96, 3, 3]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage3.1.blocks.0.conv1.bn.weight - torch.Size([96]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage3.1.blocks.0.conv1.bn.bias - torch.Size([96]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage3.1.blocks.0.conv2.depthwise_conv.conv.weight - torch.Size([96, 1, 5, 5]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage3.1.blocks.0.conv2.depthwise_conv.bn.weight - torch.Size([96]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage3.1.blocks.0.conv2.depthwise_conv.bn.bias - torch.Size([96]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage3.1.blocks.0.conv2.pointwise_conv.conv.weight - torch.Size([96, 96, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage3.1.blocks.0.conv2.pointwise_conv.bn.weight - torch.Size([96]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage3.1.blocks.0.conv2.pointwise_conv.bn.bias - torch.Size([96]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage3.1.attention.fc.weight - torch.Size([192, 192, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage3.1.attention.fc.bias - torch.Size([192]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage4.0.conv.weight - torch.Size([384, 192, 3, 3]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage4.0.bn.weight - torch.Size([384]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage4.0.bn.bias - torch.Size([384]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage4.1.conv1.conv.weight - torch.Size([192, 384, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage4.1.conv1.bn.weight - torch.Size([192]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage4.1.conv1.bn.bias - torch.Size([192]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage4.1.conv2.conv.weight - torch.Size([384, 768, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage4.1.conv2.bn.weight - torch.Size([384]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage4.1.conv2.bn.bias - torch.Size([384]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage4.2.main_conv.conv.weight - torch.Size([192, 384, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage4.2.main_conv.bn.weight - torch.Size([192]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage4.2.main_conv.bn.bias - torch.Size([192]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage4.2.short_conv.conv.weight - torch.Size([192, 384, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage4.2.short_conv.bn.weight - torch.Size([192]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage4.2.short_conv.bn.bias - torch.Size([192]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage4.2.final_conv.conv.weight - torch.Size([384, 384, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage4.2.final_conv.bn.weight - torch.Size([384]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage4.2.final_conv.bn.bias - torch.Size([384]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage4.2.blocks.0.conv1.conv.weight - torch.Size([192, 192, 3, 3]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage4.2.blocks.0.conv1.bn.weight - torch.Size([192]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage4.2.blocks.0.conv1.bn.bias - torch.Size([192]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage4.2.blocks.0.conv2.depthwise_conv.conv.weight - torch.Size([192, 1, 5, 5]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage4.2.blocks.0.conv2.depthwise_conv.bn.weight - torch.Size([192]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage4.2.blocks.0.conv2.depthwise_conv.bn.bias - torch.Size([192]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage4.2.blocks.0.conv2.pointwise_conv.conv.weight - torch.Size([192, 192, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage4.2.blocks.0.conv2.pointwise_conv.bn.weight - torch.Size([192]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage4.2.blocks.0.conv2.pointwise_conv.bn.bias - torch.Size([192]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage4.2.attention.fc.weight - torch.Size([384, 384, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage4.2.attention.fc.bias - torch.Size([384]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

neck.reduce_layers.0.conv.weight - torch.Size([192, 384, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.reduce_layers.0.bn.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.reduce_layers.0.bn.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.reduce_layers.1.conv.weight - torch.Size([96, 192, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.reduce_layers.1.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.reduce_layers.1.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.top_down_blocks.0.main_conv.conv.weight - torch.Size([96, 384, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.top_down_blocks.0.main_conv.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.top_down_blocks.0.main_conv.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.top_down_blocks.0.short_conv.conv.weight - torch.Size([96, 384, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.top_down_blocks.0.short_conv.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.top_down_blocks.0.short_conv.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.top_down_blocks.0.final_conv.conv.weight - torch.Size([192, 192, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.top_down_blocks.0.final_conv.bn.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.top_down_blocks.0.final_conv.bn.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.top_down_blocks.0.blocks.0.conv1.conv.weight - torch.Size([96, 96, 3, 3]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.top_down_blocks.0.blocks.0.conv1.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.top_down_blocks.0.blocks.0.conv1.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.top_down_blocks.0.blocks.0.conv2.depthwise_conv.conv.weight - torch.Size([96, 1, 5, 5]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.top_down_blocks.0.blocks.0.conv2.depthwise_conv.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.top_down_blocks.0.blocks.0.conv2.depthwise_conv.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.top_down_blocks.0.blocks.0.conv2.pointwise_conv.conv.weight - torch.Size([96, 96, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.top_down_blocks.0.blocks.0.conv2.pointwise_conv.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.top_down_blocks.0.blocks.0.conv2.pointwise_conv.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.top_down_blocks.1.main_conv.conv.weight - torch.Size([48, 192, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.top_down_blocks.1.main_conv.bn.weight - torch.Size([48]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.top_down_blocks.1.main_conv.bn.bias - torch.Size([48]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.top_down_blocks.1.short_conv.conv.weight - torch.Size([48, 192, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.top_down_blocks.1.short_conv.bn.weight - torch.Size([48]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.top_down_blocks.1.short_conv.bn.bias - torch.Size([48]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.top_down_blocks.1.final_conv.conv.weight - torch.Size([96, 96, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.top_down_blocks.1.final_conv.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.top_down_blocks.1.final_conv.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.top_down_blocks.1.blocks.0.conv1.conv.weight - torch.Size([48, 48, 3, 3]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.top_down_blocks.1.blocks.0.conv1.bn.weight - torch.Size([48]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.top_down_blocks.1.blocks.0.conv1.bn.bias - torch.Size([48]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.top_down_blocks.1.blocks.0.conv2.depthwise_conv.conv.weight - torch.Size([48, 1, 5, 5]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.top_down_blocks.1.blocks.0.conv2.depthwise_conv.bn.weight - torch.Size([48]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.top_down_blocks.1.blocks.0.conv2.depthwise_conv.bn.bias - torch.Size([48]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.top_down_blocks.1.blocks.0.conv2.pointwise_conv.conv.weight - torch.Size([48, 48, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.top_down_blocks.1.blocks.0.conv2.pointwise_conv.bn.weight - torch.Size([48]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.top_down_blocks.1.blocks.0.conv2.pointwise_conv.bn.bias - torch.Size([48]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.downsamples.0.conv.weight - torch.Size([96, 96, 3, 3]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.downsamples.0.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.downsamples.0.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.downsamples.1.conv.weight - torch.Size([192, 192, 3, 3]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.downsamples.1.bn.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.downsamples.1.bn.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.bottom_up_blocks.0.main_conv.conv.weight - torch.Size([96, 192, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.bottom_up_blocks.0.main_conv.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.bottom_up_blocks.0.main_conv.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.bottom_up_blocks.0.short_conv.conv.weight - torch.Size([96, 192, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.bottom_up_blocks.0.short_conv.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.bottom_up_blocks.0.short_conv.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.bottom_up_blocks.0.final_conv.conv.weight - torch.Size([192, 192, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.bottom_up_blocks.0.final_conv.bn.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.bottom_up_blocks.0.final_conv.bn.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.bottom_up_blocks.0.blocks.0.conv1.conv.weight - torch.Size([96, 96, 3, 3]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.bottom_up_blocks.0.blocks.0.conv1.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.bottom_up_blocks.0.blocks.0.conv1.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.bottom_up_blocks.0.blocks.0.conv2.depthwise_conv.conv.weight - torch.Size([96, 1, 5, 5]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.bottom_up_blocks.0.blocks.0.conv2.depthwise_conv.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.bottom_up_blocks.0.blocks.0.conv2.depthwise_conv.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.bottom_up_blocks.0.blocks.0.conv2.pointwise_conv.conv.weight - torch.Size([96, 96, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.bottom_up_blocks.0.blocks.0.conv2.pointwise_conv.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.bottom_up_blocks.0.blocks.0.conv2.pointwise_conv.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.bottom_up_blocks.1.main_conv.conv.weight - torch.Size([192, 384, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.bottom_up_blocks.1.main_conv.bn.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.bottom_up_blocks.1.main_conv.bn.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.bottom_up_blocks.1.short_conv.conv.weight - torch.Size([192, 384, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.bottom_up_blocks.1.short_conv.bn.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.bottom_up_blocks.1.short_conv.bn.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.bottom_up_blocks.1.final_conv.conv.weight - torch.Size([384, 384, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.bottom_up_blocks.1.final_conv.bn.weight - torch.Size([384]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.bottom_up_blocks.1.final_conv.bn.bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.bottom_up_blocks.1.blocks.0.conv1.conv.weight - torch.Size([192, 192, 3, 3]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.bottom_up_blocks.1.blocks.0.conv1.bn.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.bottom_up_blocks.1.blocks.0.conv1.bn.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.bottom_up_blocks.1.blocks.0.conv2.depthwise_conv.conv.weight - torch.Size([192, 1, 5, 5]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.bottom_up_blocks.1.blocks.0.conv2.depthwise_conv.bn.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.bottom_up_blocks.1.blocks.0.conv2.depthwise_conv.bn.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.bottom_up_blocks.1.blocks.0.conv2.pointwise_conv.conv.weight - torch.Size([192, 192, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.bottom_up_blocks.1.blocks.0.conv2.pointwise_conv.bn.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.bottom_up_blocks.1.blocks.0.conv2.pointwise_conv.bn.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.out_convs.0.conv.weight - torch.Size([96, 96, 3, 3]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.out_convs.0.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.out_convs.0.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.out_convs.1.conv.weight - torch.Size([96, 192, 3, 3]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.out_convs.1.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.out_convs.1.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.out_convs.2.conv.weight - torch.Size([96, 384, 3, 3]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.out_convs.2.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.out_convs.2.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

bbox_head.cls_convs.0.0.conv.weight - torch.Size([96, 96, 3, 3]): 
Initialized by user-defined `init_weights` in RTMDetSepBNHead  

bbox_head.cls_convs.0.0.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

bbox_head.cls_convs.0.0.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

bbox_head.cls_convs.0.1.conv.weight - torch.Size([96, 96, 3, 3]): 
Initialized by user-defined `init_weights` in RTMDetSepBNHead  

bbox_head.cls_convs.0.1.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

bbox_head.cls_convs.0.1.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

bbox_head.cls_convs.1.0.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

bbox_head.cls_convs.1.0.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

bbox_head.cls_convs.1.1.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

bbox_head.cls_convs.1.1.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

bbox_head.cls_convs.2.0.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

bbox_head.cls_convs.2.0.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

bbox_head.cls_convs.2.1.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

bbox_head.cls_convs.2.1.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

bbox_head.reg_convs.0.0.conv.weight - torch.Size([96, 96, 3, 3]): 
Initialized by user-defined `init_weights` in RTMDetSepBNHead  

bbox_head.reg_convs.0.0.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

bbox_head.reg_convs.0.0.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

bbox_head.reg_convs.0.1.conv.weight - torch.Size([96, 96, 3, 3]): 
Initialized by user-defined `init_weights` in RTMDetSepBNHead  

bbox_head.reg_convs.0.1.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

bbox_head.reg_convs.0.1.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

bbox_head.reg_convs.1.0.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

bbox_head.reg_convs.1.0.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

bbox_head.reg_convs.1.1.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

bbox_head.reg_convs.1.1.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

bbox_head.reg_convs.2.0.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

bbox_head.reg_convs.2.0.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

bbox_head.reg_convs.2.1.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

bbox_head.reg_convs.2.1.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

bbox_head.rtm_cls.0.weight - torch.Size([1, 96, 1, 1]): 
Initialized by user-defined `init_weights` in RTMDetSepBNHead  

bbox_head.rtm_cls.0.bias - torch.Size([1]): 
Initialized by user-defined `init_weights` in RTMDetSepBNHead  

bbox_head.rtm_cls.1.weight - torch.Size([1, 96, 1, 1]): 
Initialized by user-defined `init_weights` in RTMDetSepBNHead  

bbox_head.rtm_cls.1.bias - torch.Size([1]): 
Initialized by user-defined `init_weights` in RTMDetSepBNHead  

bbox_head.rtm_cls.2.weight - torch.Size([1, 96, 1, 1]): 
Initialized by user-defined `init_weights` in RTMDetSepBNHead  

bbox_head.rtm_cls.2.bias - torch.Size([1]): 
Initialized by user-defined `init_weights` in RTMDetSepBNHead  

bbox_head.rtm_reg.0.weight - torch.Size([4, 96, 1, 1]): 
Initialized by user-defined `init_weights` in RTMDetSepBNHead  

bbox_head.rtm_reg.0.bias - torch.Size([4]): 
Initialized by user-defined `init_weights` in RTMDetSepBNHead  

bbox_head.rtm_reg.1.weight - torch.Size([4, 96, 1, 1]): 
Initialized by user-defined `init_weights` in RTMDetSepBNHead  

bbox_head.rtm_reg.1.bias - torch.Size([4]): 
Initialized by user-defined `init_weights` in RTMDetSepBNHead  

bbox_head.rtm_reg.2.weight - torch.Size([4, 96, 1, 1]): 
Initialized by user-defined `init_weights` in RTMDetSepBNHead  

bbox_head.rtm_reg.2.bias - torch.Size([4]): 
Initialized by user-defined `init_weights` in RTMDetSepBNHead  
2023/06/10 11:48:44 - mmengine - INFO - Load checkpoint from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/rtmdet_tiny_8xb32-300e_coco/rtmdet_tiny_8xb32-300e_coco_20220902_112414-78e30dcc.pth
2023/06/10 11:48:44 - mmengine - WARNING - "FileClient" will be deprecated in future. Please use io functions in https://mmengine.readthedocs.io/en/latest/api/fileio.html#file-io
2023/06/10 11:48:44 - mmengine - WARNING - "HardDiskBackend" is the alias of "LocalBackend" and the former will be deprecated in future.
2023/06/10 11:48:44 - mmengine - INFO - Checkpoints will be saved to /home/tonnn/.nas/weijia/work/mmlab-camp/mmdetection/work_dirs/rtmdet_tiny_1xb12-40e_balloon.
2023/06/10 11:48:55 - mmengine - INFO - Exp name: rtmdet_tiny_1xb12-40e_balloon_20230610_114823
2023/06/10 11:48:55 - mmengine - INFO - Epoch(train)   [1][2/2]  lr: 3.4492e-05  eta: 0:19:03  time: 5.7775  data_time: 1.9922  memory: 3923  loss: 2.8516  loss_cls: 2.2071  loss_bbox: 0.6445
2023/06/10 11:49:03 - mmengine - INFO - Exp name: rtmdet_tiny_1xb12-40e_balloon_20230610_114823
2023/06/10 11:49:03 - mmengine - INFO - Epoch(train)   [2][2/2]  lr: 1.0346e-04  eta: 0:16:03  time: 4.9181  data_time: 1.8090  memory: 3953  loss: 2.8264  loss_cls: 2.1738  loss_bbox: 0.6526
2023/06/10 11:49:11 - mmengine - INFO - Exp name: rtmdet_tiny_1xb12-40e_balloon_20230610_114823
2023/06/10 11:49:11 - mmengine - INFO - Epoch(train)   [3][2/2]  lr: 1.7242e-04  eta: 0:15:00  time: 4.6435  data_time: 1.7677  memory: 3955  loss: 2.8191  loss_cls: 2.1653  loss_bbox: 0.6538
2023/06/10 11:49:18 - mmengine - INFO - Exp name: rtmdet_tiny_1xb12-40e_balloon_20230610_114823
2023/06/10 11:49:18 - mmengine - INFO - Epoch(train)   [4][2/2]  lr: 2.4139e-04  eta: 0:13:42  time: 4.2837  data_time: 1.6926  memory: 3960  loss: 2.8161  loss_cls: 2.1653  loss_bbox: 0.6508
2023/06/10 11:49:26 - mmengine - INFO - Exp name: rtmdet_tiny_1xb12-40e_balloon_20230610_114823
2023/06/10 11:49:26 - mmengine - INFO - Epoch(train)   [5][2/2]  lr: 3.1035e-04  eta: 0:13:27  time: 4.2523  data_time: 1.6523  memory: 3953  loss: 2.8279  loss_cls: 2.1869  loss_bbox: 0.6410
2023/06/10 11:49:34 - mmengine - INFO - Exp name: rtmdet_tiny_1xb12-40e_balloon_20230610_114823
2023/06/10 11:49:34 - mmengine - INFO - Epoch(train)   [6][2/2]  lr: 3.7932e-04  eta: 0:13:08  time: 4.1927  data_time: 1.6226  memory: 3958  loss: 2.8429  loss_cls: 2.2158  loss_bbox: 0.6271
2023/06/10 11:49:41 - mmengine - INFO - Exp name: rtmdet_tiny_1xb12-40e_balloon_20230610_114823
2023/06/10 11:49:41 - mmengine - INFO - Epoch(train)   [7][2/2]  lr: 4.4828e-04  eta: 0:12:39  time: 4.0807  data_time: 1.6103  memory: 3953  loss: 2.8416  loss_cls: 2.2243  loss_bbox: 0.6173
2023/06/10 11:49:48 - mmengine - INFO - Exp name: rtmdet_tiny_1xb12-40e_balloon_20230610_114823
2023/06/10 11:49:48 - mmengine - INFO - Epoch(train)   [8][2/2]  lr: 5.1725e-04  eta: 0:12:21  time: 4.0317  data_time: 1.5807  memory: 3953  loss: 2.8405  loss_cls: 2.2374  loss_bbox: 0.6031
2023/06/10 11:49:52 - mmengine - INFO - Exp name: rtmdet_tiny_1xb12-40e_balloon_20230610_114823
2023/06/10 11:49:52 - mmengine - INFO - Epoch(train)   [9][2/2]  lr: 5.8621e-04  eta: 0:11:28  time: 3.7851  data_time: 1.5557  memory: 3953  loss: 2.8302  loss_cls: 2.2455  loss_bbox: 0.5847
2023/06/10 11:49:56 - mmengine - INFO - Exp name: rtmdet_tiny_1xb12-40e_balloon_20230610_114823
2023/06/10 11:49:56 - mmengine - INFO - Epoch(train)  [10][2/2]  lr: 6.5518e-04  eta: 0:10:47  time: 3.5982  data_time: 1.5403  memory: 3959  loss: 2.7945  loss_cls: 2.2208  loss_bbox: 0.5737
2023/06/10 11:49:56 - mmengine - INFO - Saving checkpoint at 10 epochs
2023/06/10 11:49:58 - mmengine - INFO - Epoch(val)  [10][ 5/13]    eta: 0:00:00  time: 0.1025  data_time: 0.0589  memory: 109  
2023/06/10 11:49:59 - mmengine - INFO - Epoch(val)  [10][10/13]    eta: 0:00:00  time: 0.0616  data_time: 0.0300  memory: 109  
2023/06/10 11:49:59 - mmengine - INFO - Evaluating bbox...
2023/06/10 11:49:59 - mmengine - INFO - bbox_mAP_copypaste: 0.432 0.589 0.520 0.000 0.123 0.561
2023/06/10 11:49:59 - mmengine - INFO - Epoch(val) [10][13/13]    coco/bbox_mAP: 0.4320  coco/bbox_mAP_50: 0.5890  coco/bbox_mAP_75: 0.5200  coco/bbox_mAP_s: 0.0000  coco/bbox_mAP_m: 0.1230  coco/bbox_mAP_l: 0.5610  data_time: 0.0234  time: 0.0522
2023/06/10 11:50:01 - mmengine - INFO - The best checkpoint with 0.4320 coco/bbox_mAP at 10 epoch is saved to best_coco_bbox_mAP_epoch_10.pth.
2023/06/10 11:50:09 - mmengine - INFO - Exp name: rtmdet_tiny_1xb12-40e_balloon_20230610_114823
2023/06/10 11:50:09 - mmengine - INFO - Epoch(train)  [11][2/2]  lr: 7.2414e-04  eta: 0:10:43  time: 3.6148  data_time: 1.5294  memory: 3960  loss: 2.7331  loss_cls: 2.1737  loss_bbox: 0.5593
2023/06/10 11:50:15 - mmengine - INFO - Exp name: rtmdet_tiny_1xb12-40e_balloon_20230610_114823
2023/06/10 11:50:15 - mmengine - INFO - Epoch(train)  [12][2/2]  lr: 7.9311e-04  eta: 0:10:31  time: 3.5861  data_time: 1.5110  memory: 3953  loss: 2.6414  loss_cls: 2.0960  loss_bbox: 0.5454
2023/06/10 11:50:23 - mmengine - INFO - Exp name: rtmdet_tiny_1xb12-40e_balloon_20230610_114823
2023/06/10 11:50:23 - mmengine - INFO - Epoch(train)  [13][2/2]  lr: 8.6207e-04  eta: 0:10:27  time: 3.6048  data_time: 1.5069  memory: 3953  loss: 2.5417  loss_cls: 2.0107  loss_bbox: 0.5310
2023/06/10 11:50:31 - mmengine - INFO - Exp name: rtmdet_tiny_1xb12-40e_balloon_20230610_114823
2023/06/10 11:50:31 - mmengine - INFO - Epoch(train)  [14][2/2]  lr: 9.3104e-04  eta: 0:10:24  time: 3.6332  data_time: 1.5006  memory: 3953  loss: 2.4374  loss_cls: 1.9182  loss_bbox: 0.5192
2023/06/10 11:50:38 - mmengine - INFO - Exp name: rtmdet_tiny_1xb12-40e_balloon_20230610_114823
2023/06/10 11:50:38 - mmengine - INFO - Epoch(train)  [15][2/2]  lr: 1.0000e-03  eta: 0:10:15  time: 3.6204  data_time: 1.4908  memory: 3953  loss: 2.3586  loss_cls: 1.8492  loss_bbox: 0.5094
2023/06/10 11:50:44 - mmengine - INFO - Exp name: rtmdet_tiny_1xb12-40e_balloon_20230610_114823
2023/06/10 11:50:44 - mmengine - INFO - Epoch(train)  [16][2/2]  lr: 1.0000e-03  eta: 0:10:04  time: 3.5968  data_time: 1.4747  memory: 3953  loss: 2.3028  loss_cls: 1.8033  loss_bbox: 0.4995
2023/06/10 11:50:52 - mmengine - INFO - Exp name: rtmdet_tiny_1xb12-40e_balloon_20230610_114823
2023/06/10 11:50:52 - mmengine - INFO - Epoch(train)  [17][2/2]  lr: 1.0000e-03  eta: 0:09:57  time: 3.5999  data_time: 1.4660  memory: 3958  loss: 2.2247  loss_cls: 1.7343  loss_bbox: 0.4903
2023/06/10 11:50:59 - mmengine - INFO - Exp name: rtmdet_tiny_1xb12-40e_balloon_20230610_114823
2023/06/10 11:50:59 - mmengine - INFO - Epoch(train)  [18][2/2]  lr: 1.0000e-03  eta: 0:09:52  time: 3.6139  data_time: 1.4673  memory: 3953  loss: 2.1497  loss_cls: 1.6688  loss_bbox: 0.4809
2023/06/10 11:51:05 - mmengine - INFO - Exp name: rtmdet_tiny_1xb12-40e_balloon_20230610_114823
2023/06/10 11:51:05 - mmengine - INFO - Epoch(train)  [19][2/2]  lr: 1.0000e-03  eta: 0:09:40  time: 3.5826  data_time: 1.4535  memory: 3953  loss: 2.0772  loss_cls: 1.6062  loss_bbox: 0.4710
2023/06/10 11:51:12 - mmengine - INFO - Exp name: rtmdet_tiny_1xb12-40e_balloon_20230610_114823
2023/06/10 11:51:12 - mmengine - INFO - Epoch(train)  [20][2/2]  lr: 1.0000e-03  eta: 0:09:32  time: 3.5794  data_time: 1.4486  memory: 3953  loss: 2.0082  loss_cls: 1.5469  loss_bbox: 0.4613
2023/06/10 11:51:12 - mmengine - INFO - Saving checkpoint at 20 epochs
2023/06/10 11:51:15 - mmengine - INFO - Epoch(val)  [20][ 5/13]    eta: 0:00:00  time: 0.0541  data_time: 0.0210  memory: 109  
2023/06/10 11:51:15 - mmengine - INFO - Epoch(val)  [20][10/13]    eta: 0:00:00  time: 0.0511  data_time: 0.0166  memory: 109  
2023/06/10 11:51:15 - mmengine - INFO - Evaluating bbox...
2023/06/10 11:51:15 - mmengine - INFO - bbox_mAP_copypaste: 0.644 0.770 0.758 0.000 0.421 0.744
2023/06/10 11:51:15 - mmengine - INFO - Epoch(val) [20][13/13]    coco/bbox_mAP: 0.6440  coco/bbox_mAP_50: 0.7700  coco/bbox_mAP_75: 0.7580  coco/bbox_mAP_s: 0.0000  coco/bbox_mAP_m: 0.4210  coco/bbox_mAP_l: 0.7440  data_time: 0.0060  time: 0.0459
2023/06/10 11:51:15 - mmengine - INFO - The previous best checkpoint /home/tonnn/.nas/weijia/work/mmlab-camp/mmdetection/work_dirs/rtmdet_tiny_1xb12-40e_balloon/best_coco_bbox_mAP_epoch_10.pth is removed
2023/06/10 11:51:17 - mmengine - INFO - The best checkpoint with 0.6440 coco/bbox_mAP at 20 epoch is saved to best_coco_bbox_mAP_epoch_20.pth.
2023/06/10 11:51:25 - mmengine - INFO - Exp name: rtmdet_tiny_1xb12-40e_balloon_20230610_114823
2023/06/10 11:51:25 - mmengine - INFO - Epoch(train)  [21][2/2]  lr: 1.0000e-03  eta: 0:09:26  time: 3.5852  data_time: 1.4496  memory: 3953  loss: 1.9484  loss_cls: 1.4949  loss_bbox: 0.4535
2023/06/10 11:51:32 - mmengine - INFO - Exp name: rtmdet_tiny_1xb12-40e_balloon_20230610_114823
2023/06/10 11:51:32 - mmengine - INFO - Epoch(train)  [22][2/2]  lr: 1.0000e-03  eta: 0:09:21  time: 3.5976  data_time: 1.4455  memory: 3953  loss: 1.8912  loss_cls: 1.4456  loss_bbox: 0.4456
2023/06/10 11:51:40 - mmengine - INFO - Exp name: rtmdet_tiny_1xb12-40e_balloon_20230610_114823
2023/06/10 11:51:40 - mmengine - INFO - Epoch(train)  [23][2/2]  lr: 1.0000e-03  eta: 0:09:15  time: 3.6095  data_time: 1.4416  memory: 3955  loss: 1.8369  loss_cls: 1.3991  loss_bbox: 0.4377
2023/06/10 11:51:44 - mmengine - INFO - Exp name: rtmdet_tiny_1xb12-40e_balloon_20230610_114823
2023/06/10 11:51:44 - mmengine - INFO - Epoch(train)  [24][2/2]  lr: 1.0000e-03  eta: 0:08:58  time: 3.5408  data_time: 1.4456  memory: 3953  loss: 1.7852  loss_cls: 1.3561  loss_bbox: 0.4292
2023/06/10 11:51:48 - mmengine - INFO - Exp name: rtmdet_tiny_1xb12-40e_balloon_20230610_114823
2023/06/10 11:51:48 - mmengine - INFO - Epoch(train)  [25][2/2]  lr: 1.0000e-03  eta: 0:08:41  time: 3.4748  data_time: 1.4426  memory: 3953  loss: 1.7382  loss_cls: 1.3156  loss_bbox: 0.4226
2023/06/10 11:51:52 - mmengine - INFO - Exp name: rtmdet_tiny_1xb12-40e_balloon_20230610_114823
2023/06/10 11:51:52 - mmengine - INFO - Epoch(train)  [26][2/2]  lr: 1.0000e-03  eta: 0:08:25  time: 3.3201  data_time: 1.4177  memory: 3953  loss: 1.6536  loss_cls: 1.2457  loss_bbox: 0.4079
2023/06/10 11:51:56 - mmengine - INFO - Exp name: rtmdet_tiny_1xb12-40e_balloon_20230610_114823
2023/06/10 11:51:56 - mmengine - INFO - Epoch(train)  [27][2/2]  lr: 1.0000e-03  eta: 0:08:11  time: 3.2402  data_time: 1.4133  memory: 3953  loss: 1.5663  loss_cls: 1.1747  loss_bbox: 0.3915
2023/06/10 11:52:03 - mmengine - INFO - Exp name: rtmdet_tiny_1xb12-40e_balloon_20230610_114823
2023/06/10 11:52:03 - mmengine - INFO - Epoch(train)  [28][2/2]  lr: 1.0000e-03  eta: 0:08:06  time: 3.2257  data_time: 1.4062  memory: 3953  loss: 1.4754  loss_cls: 1.1013  loss_bbox: 0.3741
2023/06/10 11:52:12 - mmengine - INFO - Exp name: rtmdet_tiny_1xb12-40e_balloon_20230610_114823
2023/06/10 11:52:12 - mmengine - INFO - Epoch(train)  [29][2/2]  lr: 1.0000e-03  eta: 0:08:03  time: 3.2636  data_time: 1.4123  memory: 3955  loss: 1.3898  loss_cls: 1.0304  loss_bbox: 0.3594
2023/06/10 11:52:20 - mmengine - INFO - Exp name: rtmdet_tiny_1xb12-40e_balloon_20230610_114823
2023/06/10 11:52:20 - mmengine - INFO - Epoch(train)  [30][2/2]  lr: 1.0000e-03  eta: 0:07:59  time: 3.2630  data_time: 1.4153  memory: 3953  loss: 1.2989  loss_cls: 0.9534  loss_bbox: 0.3455
2023/06/10 11:52:20 - mmengine - INFO - Saving checkpoint at 30 epochs
2023/06/10 11:52:22 - mmengine - INFO - Epoch(val)  [30][ 5/13]    eta: 0:00:00  time: 0.0518  data_time: 0.0147  memory: 109  
2023/06/10 11:52:23 - mmengine - INFO - Epoch(val)  [30][10/13]    eta: 0:00:00  time: 0.0499  data_time: 0.0128  memory: 109  
2023/06/10 11:52:23 - mmengine - INFO - Evaluating bbox...
2023/06/10 11:52:23 - mmengine - INFO - bbox_mAP_copypaste: 0.709 0.835 0.800 0.000 0.456 0.812
2023/06/10 11:52:23 - mmengine - INFO - Epoch(val) [30][13/13]    coco/bbox_mAP: 0.7090  coco/bbox_mAP_50: 0.8350  coco/bbox_mAP_75: 0.8000  coco/bbox_mAP_s: 0.0000  coco/bbox_mAP_m: 0.4560  coco/bbox_mAP_l: 0.8120  data_time: 0.0057  time: 0.0494
2023/06/10 11:52:23 - mmengine - INFO - The previous best checkpoint /home/tonnn/.nas/weijia/work/mmlab-camp/mmdetection/work_dirs/rtmdet_tiny_1xb12-40e_balloon/best_coco_bbox_mAP_epoch_20.pth is removed
2023/06/10 11:52:25 - mmengine - INFO - The best checkpoint with 0.7090 coco/bbox_mAP at 30 epoch is saved to best_coco_bbox_mAP_epoch_30.pth.
2023/06/10 11:52:33 - mmengine - INFO - Exp name: rtmdet_tiny_1xb12-40e_balloon_20230610_114823
2023/06/10 11:52:33 - mmengine - INFO - Epoch(train)  [31][2/2]  lr: 1.0000e-03  eta: 0:07:55  time: 3.2694  data_time: 1.4208  memory: 3961  loss: 1.2059  loss_cls: 0.8726  loss_bbox: 0.3333
2023/06/10 11:52:40 - mmengine - INFO - Exp name: rtmdet_tiny_1xb12-40e_balloon_20230610_114823
2023/06/10 11:52:40 - mmengine - INFO - Epoch(train)  [32][2/2]  lr: 1.0000e-03  eta: 0:07:49  time: 3.2802  data_time: 1.4172  memory: 3956  loss: 1.1154  loss_cls: 0.7957  loss_bbox: 0.3197
2023/06/10 11:52:48 - mmengine - INFO - Exp name: rtmdet_tiny_1xb12-40e_balloon_20230610_114823
2023/06/10 11:52:48 - mmengine - INFO - Epoch(train)  [33][2/2]  lr: 1.0000e-03  eta: 0:07:44  time: 3.2834  data_time: 1.4241  memory: 3953  loss: 1.0238  loss_cls: 0.7154  loss_bbox: 0.3083
2023/06/10 11:52:56 - mmengine - INFO - Exp name: rtmdet_tiny_1xb12-40e_balloon_20230610_114823
2023/06/10 11:52:56 - mmengine - INFO - Epoch(train)  [34][2/2]  lr: 1.0000e-03  eta: 0:07:39  time: 3.3673  data_time: 1.4345  memory: 3953  loss: 0.9352  loss_cls: 0.6353  loss_bbox: 0.2999
2023/06/10 11:53:04 - mmengine - INFO - Exp name: rtmdet_tiny_1xb12-40e_balloon_20230610_114823
2023/06/10 11:53:04 - mmengine - INFO - Epoch(train)  [35][2/2]  lr: 1.0000e-03  eta: 0:07:34  time: 3.4529  data_time: 1.4341  memory: 3953  loss: 0.8561  loss_cls: 0.5659  loss_bbox: 0.2902
2023/06/10 11:53:11 - mmengine - INFO - Exp name: rtmdet_tiny_1xb12-40e_balloon_20230610_114823
2023/06/10 11:53:11 - mmengine - INFO - Epoch(train)  [36][2/2]  lr: 1.0000e-03  eta: 0:07:27  time: 3.4489  data_time: 1.4286  memory: 3953  loss: 0.7909  loss_cls: 0.5090  loss_bbox: 0.2819
2023/06/10 11:53:18 - mmengine - INFO - Exp name: rtmdet_tiny_1xb12-40e_balloon_20230610_114823
2023/06/10 11:53:18 - mmengine - INFO - Epoch(train)  [37][2/2]  lr: 1.0000e-03  eta: 0:07:20  time: 3.4580  data_time: 1.4260  memory: 3953  loss: 0.7436  loss_cls: 0.4692  loss_bbox: 0.2744
2023/06/10 11:53:26 - mmengine - INFO - Exp name: rtmdet_tiny_1xb12-40e_balloon_20230610_114823
2023/06/10 11:53:26 - mmengine - INFO - Epoch(train)  [38][2/2]  lr: 1.0000e-03  eta: 0:07:15  time: 3.4590  data_time: 1.4193  memory: 3953  loss: 0.7116  loss_cls: 0.4418  loss_bbox: 0.2698
2023/06/10 11:53:32 - mmengine - INFO - Exp name: rtmdet_tiny_1xb12-40e_balloon_20230610_114823
2023/06/10 11:53:32 - mmengine - INFO - Epoch(train)  [39][2/2]  lr: 1.0000e-03  eta: 0:07:06  time: 3.4205  data_time: 1.4120  memory: 3953  loss: 0.6876  loss_cls: 0.4241  loss_bbox: 0.2635
2023/06/10 11:53:36 - mmengine - INFO - Exp name: rtmdet_tiny_1xb12-40e_balloon_20230610_114823
2023/06/10 11:53:36 - mmengine - INFO - Epoch(train)  [40][2/2]  lr: 1.0000e-03  eta: 0:06:54  time: 3.3508  data_time: 1.4067  memory: 3955  loss: 0.6566  loss_cls: 0.3998  loss_bbox: 0.2568
2023/06/10 11:53:36 - mmengine - INFO - Saving checkpoint at 40 epochs
2023/06/10 11:53:38 - mmengine - INFO - Epoch(val)  [40][ 5/13]    eta: 0:00:00  time: 0.0501  data_time: 0.0125  memory: 109  
2023/06/10 11:53:38 - mmengine - INFO - Epoch(val)  [40][10/13]    eta: 0:00:00  time: 0.0485  data_time: 0.0113  memory: 109  
2023/06/10 11:53:38 - mmengine - INFO - Evaluating bbox...
2023/06/10 11:53:38 - mmengine - INFO - bbox_mAP_copypaste: 0.715 0.832 0.819 0.000 0.467 0.817
2023/06/10 11:53:38 - mmengine - INFO - Epoch(val) [40][13/13]    coco/bbox_mAP: 0.7150  coco/bbox_mAP_50: 0.8320  coco/bbox_mAP_75: 0.8190  coco/bbox_mAP_s: 0.0000  coco/bbox_mAP_m: 0.4670  coco/bbox_mAP_l: 0.8170  data_time: 0.0068  time: 0.0381
2023/06/10 11:53:38 - mmengine - INFO - The previous best checkpoint /home/tonnn/.nas/weijia/work/mmlab-camp/mmdetection/work_dirs/rtmdet_tiny_1xb12-40e_balloon/best_coco_bbox_mAP_epoch_30.pth is removed
2023/06/10 11:53:40 - mmengine - INFO - The best checkpoint with 0.7150 coco/bbox_mAP at 40 epoch is saved to best_coco_bbox_mAP_epoch_40.pth.
2023/06/10 11:53:44 - mmengine - INFO - Exp name: rtmdet_tiny_1xb12-40e_balloon_20230610_114823
2023/06/10 11:53:44 - mmengine - INFO - Epoch(train)  [41][2/2]  lr: 1.0000e-03  eta: 0:06:42  time: 3.2930  data_time: 1.4076  memory: 3953  loss: 0.6177  loss_cls: 0.3660  loss_bbox: 0.2516
2023/06/10 11:53:52 - mmengine - INFO - Exp name: rtmdet_tiny_1xb12-40e_balloon_20230610_114823
2023/06/10 11:53:52 - mmengine - INFO - Epoch(train)  [42][2/2]  lr: 1.0000e-03  eta: 0:06:37  time: 3.3077  data_time: 1.4121  memory: 3953  loss: 0.5955  loss_cls: 0.3496  loss_bbox: 0.2460
2023/06/10 11:54:01 - mmengine - INFO - Exp name: rtmdet_tiny_1xb12-40e_balloon_20230610_114823
2023/06/10 11:54:01 - mmengine - INFO - Epoch(train)  [43][2/2]  lr: 1.0000e-03  eta: 0:06:32  time: 3.3265  data_time: 1.4194  memory: 3953  loss: 0.5818  loss_cls: 0.3393  loss_bbox: 0.2424
2023/06/10 11:54:08 - mmengine - INFO - Exp name: rtmdet_tiny_1xb12-40e_balloon_20230610_114823
2023/06/10 11:54:08 - mmengine - INFO - Epoch(train)  [44][2/2]  lr: 1.0000e-03  eta: 0:06:26  time: 3.3521  data_time: 1.4205  memory: 3953  loss: 0.5717  loss_cls: 0.3321  loss_bbox: 0.2396
2023/06/10 11:54:16 - mmengine - INFO - Exp name: rtmdet_tiny_1xb12-40e_balloon_20230610_114823
2023/06/10 11:54:16 - mmengine - INFO - Epoch(train)  [45][2/2]  lr: 1.0000e-03  eta: 0:06:20  time: 3.3656  data_time: 1.4201  memory: 3953  loss: 0.5617  loss_cls: 0.3248  loss_bbox: 0.2368
2023/06/10 11:54:23 - mmengine - INFO - Exp name: rtmdet_tiny_1xb12-40e_balloon_20230610_114823
2023/06/10 11:54:23 - mmengine - INFO - Epoch(train)  [46][2/2]  lr: 1.0000e-03  eta: 0:06:14  time: 3.3671  data_time: 1.4149  memory: 3953  loss: 0.5491  loss_cls: 0.3164  loss_bbox: 0.2328
2023/06/10 11:54:31 - mmengine - INFO - Exp name: rtmdet_tiny_1xb12-40e_balloon_20230610_114823
2023/06/10 11:54:31 - mmengine - INFO - Epoch(train)  [47][2/2]  lr: 1.0000e-03  eta: 0:06:08  time: 3.3676  data_time: 1.4166  memory: 3955  loss: 0.5419  loss_cls: 0.3117  loss_bbox: 0.2303
2023/06/10 11:54:38 - mmengine - INFO - Exp name: rtmdet_tiny_1xb12-40e_balloon_20230610_114823
2023/06/10 11:54:38 - mmengine - INFO - Epoch(train)  [48][2/2]  lr: 1.0000e-03  eta: 0:06:02  time: 3.3626  data_time: 1.4119  memory: 3953  loss: 0.5333  loss_cls: 0.3057  loss_bbox: 0.2275
2023/06/10 11:54:45 - mmengine - INFO - Exp name: rtmdet_tiny_1xb12-40e_balloon_20230610_114823
2023/06/10 11:54:45 - mmengine - INFO - Epoch(train)  [49][2/2]  lr: 1.0000e-03  eta: 0:05:54  time: 3.4084  data_time: 1.4067  memory: 3953  loss: 0.5277  loss_cls: 0.3010  loss_bbox: 0.2266
2023/06/10 11:54:53 - mmengine - INFO - Exp name: rtmdet_tiny_1xb12-40e_balloon_20230610_114823
2023/06/10 11:54:53 - mmengine - INFO - Epoch(train)  [50][2/2]  lr: 1.0000e-03  eta: 0:05:48  time: 3.4935  data_time: 1.4036  memory: 3953  loss: 0.5220  loss_cls: 0.2976  loss_bbox: 0.2244
2023/06/10 11:54:53 - mmengine - INFO - Saving checkpoint at 50 epochs
2023/06/10 11:54:55 - mmengine - INFO - Epoch(val)  [50][ 5/13]    eta: 0:00:00  time: 0.0439  data_time: 0.0067  memory: 109  
2023/06/10 11:54:55 - mmengine - INFO - Epoch(val)  [50][10/13]    eta: 0:00:00  time: 0.0464  data_time: 0.0067  memory: 109  
2023/06/10 11:54:56 - mmengine - INFO - Evaluating bbox...
2023/06/10 11:54:56 - mmengine - INFO - bbox_mAP_copypaste: 0.727 0.836 0.810 0.000 0.469 0.841
2023/06/10 11:54:56 - mmengine - INFO - Epoch(val) [50][13/13]    coco/bbox_mAP: 0.7270  coco/bbox_mAP_50: 0.8360  coco/bbox_mAP_75: 0.8100  coco/bbox_mAP_s: 0.0000  coco/bbox_mAP_m: 0.4690  coco/bbox_mAP_l: 0.8410  data_time: 0.0060  time: 0.0504
2023/06/10 11:54:56 - mmengine - INFO - The previous best checkpoint /home/tonnn/.nas/weijia/work/mmlab-camp/mmdetection/work_dirs/rtmdet_tiny_1xb12-40e_balloon/best_coco_bbox_mAP_epoch_40.pth is removed
2023/06/10 11:54:58 - mmengine - INFO - The best checkpoint with 0.7270 coco/bbox_mAP at 50 epoch is saved to best_coco_bbox_mAP_epoch_50.pth.
2023/06/10 11:55:05 - mmengine - INFO - Exp name: rtmdet_tiny_1xb12-40e_balloon_20230610_114823
2023/06/10 11:55:05 - mmengine - INFO - Epoch(train)  [51][2/2]  lr: 9.9977e-04  eta: 0:05:41  time: 3.5676  data_time: 1.4060  memory: 3953  loss: 0.5109  loss_cls: 0.2890  loss_bbox: 0.2219
2023/06/10 11:55:12 - mmengine - INFO - Exp name: rtmdet_tiny_1xb12-40e_balloon_20230610_114823
2023/06/10 11:55:12 - mmengine - INFO - Epoch(train)  [52][2/2]  lr: 9.9789e-04  eta: 0:05:35  time: 3.6283  data_time: 1.4080  memory: 3953  loss: 0.5056  loss_cls: 0.2847  loss_bbox: 0.2209
2023/06/10 11:55:19 - mmengine - INFO - Exp name: rtmdet_tiny_1xb12-40e_balloon_20230610_114823
2023/06/10 11:55:19 - mmengine - INFO - Epoch(train)  [53][2/2]  lr: 9.9415e-04  eta: 0:05:27  time: 3.6079  data_time: 1.4002  memory: 3959  loss: 0.5029  loss_cls: 0.2828  loss_bbox: 0.2201
2023/06/10 11:55:23 - mmengine - INFO - Exp name: rtmdet_tiny_1xb12-40e_balloon_20230610_114823
2023/06/10 11:55:23 - mmengine - INFO - Epoch(train)  [54][2/2]  lr: 9.8856e-04  eta: 0:05:18  time: 3.5314  data_time: 1.3949  memory: 3953  loss: 0.4950  loss_cls: 0.2784  loss_bbox: 0.2166
2023/06/10 11:55:27 - mmengine - INFO - Exp name: rtmdet_tiny_1xb12-40e_balloon_20230610_114823
2023/06/10 11:55:27 - mmengine - INFO - Epoch(train)  [55][2/2]  lr: 9.8114e-04  eta: 0:05:09  time: 3.4443  data_time: 1.3894  memory: 3953  loss: 0.4896  loss_cls: 0.2746  loss_bbox: 0.2150
2023/06/10 11:55:31 - mmengine - INFO - Exp name: rtmdet_tiny_1xb12-40e_balloon_20230610_114823
2023/06/10 11:55:31 - mmengine - INFO - Epoch(train)  [56][2/2]  lr: 9.7192e-04  eta: 0:04:59  time: 3.3525  data_time: 1.3761  memory: 3959  loss: 0.4846  loss_cls: 0.2717  loss_bbox: 0.2129
2023/06/10 11:55:35 - mmengine - INFO - Exp name: rtmdet_tiny_1xb12-40e_balloon_20230610_114823
2023/06/10 11:55:35 - mmengine - INFO - Epoch(train)  [57][2/2]  lr: 9.6093e-04  eta: 0:04:50  time: 3.2822  data_time: 1.3743  memory: 3953  loss: 0.4796  loss_cls: 0.2669  loss_bbox: 0.2127
2023/06/10 11:55:42 - mmengine - INFO - Exp name: rtmdet_tiny_1xb12-40e_balloon_20230610_114823
2023/06/10 11:55:42 - mmengine - INFO - Epoch(train)  [58][2/2]  lr: 9.4823e-04  eta: 0:04:44  time: 3.2860  data_time: 1.3653  memory: 3953  loss: 0.4760  loss_cls: 0.2636  loss_bbox: 0.2123
2023/06/10 11:55:50 - mmengine - INFO - Exp name: rtmdet_tiny_1xb12-40e_balloon_20230610_114823
2023/06/10 11:55:50 - mmengine - INFO - Epoch(train)  [59][2/2]  lr: 9.3385e-04  eta: 0:04:38  time: 3.2830  data_time: 1.3563  memory: 3953  loss: 0.4725  loss_cls: 0.2608  loss_bbox: 0.2118
2023/06/10 11:55:58 - mmengine - INFO - Exp name: rtmdet_tiny_1xb12-40e_balloon_20230610_114823
2023/06/10 11:55:58 - mmengine - INFO - Epoch(train)  [60][2/2]  lr: 9.1786e-04  eta: 0:04:32  time: 3.2749  data_time: 1.3524  memory: 3953  loss: 0.4678  loss_cls: 0.2581  loss_bbox: 0.2097
2023/06/10 11:55:58 - mmengine - INFO - Saving checkpoint at 60 epochs
2023/06/10 11:56:00 - mmengine - INFO - Epoch(val)  [60][ 5/13]    eta: 0:00:00  time: 0.0475  data_time: 0.0067  memory: 109  
2023/06/10 11:56:01 - mmengine - INFO - Epoch(val)  [60][10/13]    eta: 0:00:00  time: 0.0477  data_time: 0.0067  memory: 109  
2023/06/10 11:56:01 - mmengine - INFO - Evaluating bbox...
2023/06/10 11:56:01 - mmengine - INFO - bbox_mAP_copypaste: 0.715 0.830 0.807 0.000 0.416 0.829
2023/06/10 11:56:01 - mmengine - INFO - Epoch(val) [60][13/13]    coco/bbox_mAP: 0.7150  coco/bbox_mAP_50: 0.8300  coco/bbox_mAP_75: 0.8070  coco/bbox_mAP_s: 0.0000  coco/bbox_mAP_m: 0.4160  coco/bbox_mAP_l: 0.8290  data_time: 0.0062  time: 0.0500
2023/06/10 11:56:09 - mmengine - INFO - Exp name: rtmdet_tiny_1xb12-40e_balloon_20230610_114823
2023/06/10 11:56:09 - mmengine - INFO - Epoch(train)  [61][2/2]  lr: 9.0032e-04  eta: 0:04:25  time: 3.2806  data_time: 1.3499  memory: 3953  loss: 0.4655  loss_cls: 0.2565  loss_bbox: 0.2090
2023/06/10 11:56:16 - mmengine - INFO - Exp name: rtmdet_tiny_1xb12-40e_balloon_20230610_114823
2023/06/10 11:56:16 - mmengine - INFO - Epoch(train)  [62][2/2]  lr: 8.8130e-04  eta: 0:04:19  time: 3.2887  data_time: 1.3538  memory: 3953  loss: 0.4644  loss_cls: 0.2562  loss_bbox: 0.2083
2023/06/10 11:56:23 - mmengine - INFO - Exp name: rtmdet_tiny_1xb12-40e_balloon_20230610_114823
2023/06/10 11:56:23 - mmengine - INFO - Epoch(train)  [63][2/2]  lr: 8.6088e-04  eta: 0:04:12  time: 3.2750  data_time: 1.3579  memory: 3953  loss: 0.4590  loss_cls: 0.2533  loss_bbox: 0.2057
2023/06/10 11:56:31 - mmengine - INFO - Exp name: rtmdet_tiny_1xb12-40e_balloon_20230610_114823
2023/06/10 11:56:31 - mmengine - INFO - Epoch(train)  [64][2/2]  lr: 8.3912e-04  eta: 0:04:06  time: 3.3039  data_time: 1.3642  memory: 3953  loss: 0.4567  loss_cls: 0.2512  loss_bbox: 0.2055
2023/06/10 11:56:39 - mmengine - INFO - Exp name: rtmdet_tiny_1xb12-40e_balloon_20230610_114823
2023/06/10 11:56:39 - mmengine - INFO - Epoch(train)  [65][2/2]  lr: 8.1613e-04  eta: 0:04:00  time: 3.3998  data_time: 1.3702  memory: 3953  loss: 0.4543  loss_cls: 0.2488  loss_bbox: 0.2055
2023/06/10 11:56:46 - mmengine - INFO - Exp name: rtmdet_tiny_1xb12-40e_balloon_20230610_114823
2023/06/10 11:56:46 - mmengine - INFO - Epoch(train)  [66][2/2]  lr: 7.9199e-04  eta: 0:03:53  time: 3.4772  data_time: 1.3799  memory: 3953  loss: 0.4524  loss_cls: 0.2477  loss_bbox: 0.2047
2023/06/10 11:56:54 - mmengine - INFO - Exp name: rtmdet_tiny_1xb12-40e_balloon_20230610_114823
2023/06/10 11:56:54 - mmengine - INFO - Epoch(train)  [67][2/2]  lr: 7.6679e-04  eta: 0:03:47  time: 3.4691  data_time: 1.3791  memory: 3955  loss: 0.4535  loss_cls: 0.2488  loss_bbox: 0.2047
2023/06/10 11:57:02 - mmengine - INFO - Exp name: rtmdet_tiny_1xb12-40e_balloon_20230610_114823
2023/06/10 11:57:02 - mmengine - INFO - Epoch(train)  [68][2/2]  lr: 7.4065e-04  eta: 0:03:40  time: 3.4617  data_time: 1.3757  memory: 3953  loss: 0.4500  loss_cls: 0.2460  loss_bbox: 0.2039
2023/06/10 11:57:09 - mmengine - INFO - Exp name: rtmdet_tiny_1xb12-40e_balloon_20230610_114823
2023/06/10 11:57:09 - mmengine - INFO - Epoch(train)  [69][2/2]  lr: 7.1365e-04  eta: 0:03:34  time: 3.4588  data_time: 1.3809  memory: 3953  loss: 0.4464  loss_cls: 0.2432  loss_bbox: 0.2031
2023/06/10 11:57:15 - mmengine - INFO - Exp name: rtmdet_tiny_1xb12-40e_balloon_20230610_114823
2023/06/10 11:57:15 - mmengine - INFO - Epoch(train)  [70][2/2]  lr: 6.8590e-04  eta: 0:03:26  time: 3.4184  data_time: 1.3790  memory: 3953  loss: 0.4455  loss_cls: 0.2428  loss_bbox: 0.2027
2023/06/10 11:57:15 - mmengine - INFO - Saving checkpoint at 70 epochs
2023/06/10 11:57:18 - mmengine - INFO - Epoch(val)  [70][ 5/13]    eta: 0:00:00  time: 0.0477  data_time: 0.0077  memory: 109  
2023/06/10 11:57:18 - mmengine - INFO - Epoch(val)  [70][10/13]    eta: 0:00:00  time: 0.0454  data_time: 0.0077  memory: 109  
2023/06/10 11:57:18 - mmengine - INFO - Evaluating bbox...
2023/06/10 11:57:18 - mmengine - INFO - bbox_mAP_copypaste: 0.719 0.832 0.811 0.000 0.429 0.830
2023/06/10 11:57:18 - mmengine - INFO - Epoch(val) [70][13/13]    coco/bbox_mAP: 0.7190  coco/bbox_mAP_50: 0.8320  coco/bbox_mAP_75: 0.8110  coco/bbox_mAP_s: 0.0000  coco/bbox_mAP_m: 0.4290  coco/bbox_mAP_l: 0.8300  data_time: 0.0092  time: 0.0363
2023/06/10 11:57:22 - mmengine - INFO - Exp name: rtmdet_tiny_1xb12-40e_balloon_20230610_114823
2023/06/10 11:57:22 - mmengine - INFO - Epoch(train)  [71][2/2]  lr: 6.5752e-04  eta: 0:03:18  time: 3.3476  data_time: 1.3840  memory: 3953  loss: 0.4448  loss_cls: 0.2421  loss_bbox: 0.2027
2023/06/10 11:57:26 - mmengine - INFO - Exp name: rtmdet_tiny_1xb12-40e_balloon_20230610_114823
2023/06/10 11:57:26 - mmengine - INFO - Epoch(train)  [72][2/2]  lr: 6.2862e-04  eta: 0:03:10  time: 3.2665  data_time: 1.3817  memory: 3953  loss: 0.4399  loss_cls: 0.2388  loss_bbox: 0.2011
2023/06/10 11:57:29 - mmengine - INFO - Exp name: rtmdet_tiny_1xb12-40e_balloon_20230610_114823
2023/06/10 11:57:29 - mmengine - INFO - Epoch(train)  [73][2/2]  lr: 5.9931e-04  eta: 0:03:02  time: 3.1875  data_time: 1.3876  memory: 3953  loss: 0.4383  loss_cls: 0.2374  loss_bbox: 0.2009
2023/06/10 11:57:36 - mmengine - INFO - Exp name: rtmdet_tiny_1xb12-40e_balloon_20230610_114823
2023/06/10 11:57:36 - mmengine - INFO - Epoch(train)  [74][2/2]  lr: 5.6970e-04  eta: 0:02:55  time: 3.1966  data_time: 1.3805  memory: 3953  loss: 0.4370  loss_cls: 0.2370  loss_bbox: 0.2000
2023/06/10 11:57:44 - mmengine - INFO - Exp name: rtmdet_tiny_1xb12-40e_balloon_20230610_114823
2023/06/10 11:57:44 - mmengine - INFO - Epoch(train)  [75][2/2]  lr: 5.3992e-04  eta: 0:02:49  time: 3.1954  data_time: 1.3860  memory: 3953  loss: 0.4344  loss_cls: 0.2351  loss_bbox: 0.1993
2023/06/10 11:57:52 - mmengine - INFO - Exp name: rtmdet_tiny_1xb12-40e_balloon_20230610_114823
2023/06/10 11:57:52 - mmengine - INFO - Epoch(train)  [76][2/2]  lr: 5.1008e-04  eta: 0:02:42  time: 3.1985  data_time: 1.3838  memory: 3953  loss: 0.4323  loss_cls: 0.2338  loss_bbox: 0.1986
2023/06/10 11:57:59 - mmengine - INFO - Exp name: rtmdet_tiny_1xb12-40e_balloon_20230610_114823
2023/06/10 11:57:59 - mmengine - INFO - Epoch(train)  [77][2/2]  lr: 4.8030e-04  eta: 0:02:36  time: 3.2089  data_time: 1.3792  memory: 3953  loss: 0.4274  loss_cls: 0.2311  loss_bbox: 0.1963
2023/06/10 11:58:07 - mmengine - INFO - Exp name: rtmdet_tiny_1xb12-40e_balloon_20230610_114823
2023/06/10 11:58:07 - mmengine - INFO - Epoch(train)  [78][2/2]  lr: 4.5069e-04  eta: 0:02:29  time: 3.2348  data_time: 1.3803  memory: 3970  loss: 0.4248  loss_cls: 0.2290  loss_bbox: 0.1959
2023/06/10 11:58:14 - mmengine - INFO - Exp name: rtmdet_tiny_1xb12-40e_balloon_20230610_114823
2023/06/10 11:58:14 - mmengine - INFO - Epoch(train)  [79][2/2]  lr: 4.2138e-04  eta: 0:02:23  time: 3.2789  data_time: 1.3735  memory: 3953  loss: 0.4218  loss_cls: 0.2260  loss_bbox: 0.1958
2023/06/10 11:58:21 - mmengine - INFO - Exp name: rtmdet_tiny_1xb12-40e_balloon_20230610_114823
2023/06/10 11:58:21 - mmengine - INFO - Epoch(train)  [80][2/2]  lr: 3.9248e-04  eta: 0:02:16  time: 3.3510  data_time: 1.3643  memory: 3953  loss: 0.4182  loss_cls: 0.2232  loss_bbox: 0.1951
2023/06/10 11:58:21 - mmengine - INFO - Saving checkpoint at 80 epochs
2023/06/10 11:58:24 - mmengine - INFO - Epoch(val)  [80][ 5/13]    eta: 0:00:00  time: 0.0443  data_time: 0.0076  memory: 109  
2023/06/10 11:58:24 - mmengine - INFO - Epoch(val)  [80][10/13]    eta: 0:00:00  time: 0.0458  data_time: 0.0075  memory: 109  
2023/06/10 11:58:24 - mmengine - INFO - Evaluating bbox...
2023/06/10 11:58:24 - mmengine - INFO - bbox_mAP_copypaste: 0.733 0.834 0.830 0.000 0.465 0.841
2023/06/10 11:58:24 - mmengine - INFO - Epoch(val) [80][13/13]    coco/bbox_mAP: 0.7330  coco/bbox_mAP_50: 0.8340  coco/bbox_mAP_75: 0.8300  coco/bbox_mAP_s: 0.0000  coco/bbox_mAP_m: 0.4650  coco/bbox_mAP_l: 0.8410  data_time: 0.0061  time: 0.0431
2023/06/10 11:58:24 - mmengine - INFO - The previous best checkpoint /home/tonnn/.nas/weijia/work/mmlab-camp/mmdetection/work_dirs/rtmdet_tiny_1xb12-40e_balloon/best_coco_bbox_mAP_epoch_50.pth is removed
2023/06/10 11:58:26 - mmengine - INFO - The best checkpoint with 0.7330 coco/bbox_mAP at 80 epoch is saved to best_coco_bbox_mAP_epoch_80.pth.
2023/06/10 11:58:33 - mmengine - INFO - Exp name: rtmdet_tiny_1xb12-40e_balloon_20230610_114823
2023/06/10 11:58:33 - mmengine - INFO - Epoch(train)  [81][2/2]  lr: 3.6410e-04  eta: 0:02:09  time: 3.4239  data_time: 1.3633  memory: 3953  loss: 0.4146  loss_cls: 0.2203  loss_bbox: 0.1943
2023/06/10 11:58:41 - mmengine - INFO - Exp name: rtmdet_tiny_1xb12-40e_balloon_20230610_114823
2023/06/10 11:58:41 - mmengine - INFO - Epoch(train)  [82][2/2]  lr: 3.3635e-04  eta: 0:02:02  time: 3.4972  data_time: 1.3653  memory: 3953  loss: 0.4127  loss_cls: 0.2194  loss_bbox: 0.1933
2023/06/10 11:58:47 - mmengine - INFO - Exp name: rtmdet_tiny_1xb12-40e_balloon_20230610_114823
2023/06/10 11:58:47 - mmengine - INFO - Epoch(train)  [83][2/2]  lr: 3.0935e-04  eta: 0:01:56  time: 3.4752  data_time: 1.3580  memory: 3953  loss: 0.4098  loss_cls: 0.2177  loss_bbox: 0.1921
2023/06/10 11:58:55 - mmengine - INFO - Exp name: rtmdet_tiny_1xb12-40e_balloon_20230610_114823
2023/06/10 11:58:55 - mmengine - INFO - Epoch(train)  [84][2/2]  lr: 2.8321e-04  eta: 0:01:49  time: 3.4652  data_time: 1.3561  memory: 3953  loss: 0.4067  loss_cls: 0.2164  loss_bbox: 0.1903
2023/06/10 11:59:02 - mmengine - INFO - Exp name: rtmdet_tiny_1xb12-40e_balloon_20230610_114823
2023/06/10 11:59:02 - mmengine - INFO - Epoch(train)  [85][2/2]  lr: 2.5801e-04  eta: 0:01:42  time: 3.4568  data_time: 1.3589  memory: 3953  loss: 0.4069  loss_cls: 0.2168  loss_bbox: 0.1901
2023/06/10 11:59:06 - mmengine - INFO - Exp name: rtmdet_tiny_1xb12-40e_balloon_20230610_114823
2023/06/10 11:59:06 - mmengine - INFO - Epoch(train)  [86][2/2]  lr: 2.3387e-04  eta: 0:01:35  time: 3.3918  data_time: 1.3646  memory: 3953  loss: 0.4057  loss_cls: 0.2156  loss_bbox: 0.1901
2023/06/10 11:59:10 - mmengine - INFO - Exp name: rtmdet_tiny_1xb12-40e_balloon_20230610_114823
2023/06/10 11:59:10 - mmengine - INFO - Epoch(train)  [87][2/2]  lr: 2.1088e-04  eta: 0:01:28  time: 3.3110  data_time: 1.3604  memory: 3953  loss: 0.4038  loss_cls: 0.2142  loss_bbox: 0.1896
2023/06/10 11:59:13 - mmengine - INFO - Exp name: rtmdet_tiny_1xb12-40e_balloon_20230610_114823
2023/06/10 11:59:13 - mmengine - INFO - Epoch(train)  [88][2/2]  lr: 1.8912e-04  eta: 0:01:20  time: 3.2361  data_time: 1.3492  memory: 3953  loss: 0.4023  loss_cls: 0.2127  loss_bbox: 0.1897
2023/06/10 11:59:17 - mmengine - INFO - Exp name: rtmdet_tiny_1xb12-40e_balloon_20230610_114823
2023/06/10 11:59:17 - mmengine - INFO - Epoch(train)  [89][2/2]  lr: 1.6870e-04  eta: 0:01:13  time: 3.1674  data_time: 1.3547  memory: 3953  loss: 0.4012  loss_cls: 0.2124  loss_bbox: 0.1888
2023/06/10 11:59:22 - mmengine - INFO - Exp name: rtmdet_tiny_1xb12-40e_balloon_20230610_114823
2023/06/10 11:59:22 - mmengine - INFO - Epoch(train)  [90][2/2]  lr: 1.4968e-04  eta: 0:01:06  time: 3.0923  data_time: 1.3504  memory: 3954  loss: 0.3990  loss_cls: 0.2114  loss_bbox: 0.1876
2023/06/10 11:59:22 - mmengine - INFO - Saving checkpoint at 90 epochs
2023/06/10 11:59:24 - mmengine - INFO - Epoch(val)  [90][ 5/13]    eta: 0:00:00  time: 0.0453  data_time: 0.0076  memory: 109  
2023/06/10 11:59:24 - mmengine - INFO - Epoch(val)  [90][10/13]    eta: 0:00:00  time: 0.0450  data_time: 0.0075  memory: 109  
2023/06/10 11:59:24 - mmengine - INFO - Evaluating bbox...
2023/06/10 11:59:24 - mmengine - INFO - bbox_mAP_copypaste: 0.731 0.832 0.815 0.000 0.446 0.844
2023/06/10 11:59:24 - mmengine - INFO - Epoch(val) [90][13/13]    coco/bbox_mAP: 0.7310  coco/bbox_mAP_50: 0.8320  coco/bbox_mAP_75: 0.8150  coco/bbox_mAP_s: 0.0000  coco/bbox_mAP_m: 0.4460  coco/bbox_mAP_l: 0.8440  data_time: 0.0059  time: 0.0430
2023/06/10 11:59:32 - mmengine - INFO - Exp name: rtmdet_tiny_1xb12-40e_balloon_20230610_114823
2023/06/10 11:59:32 - mmengine - INFO - Epoch(train)  [91][2/2]  lr: 1.3214e-04  eta: 0:01:00  time: 3.0958  data_time: 1.3381  memory: 3953  loss: 0.3971  loss_cls: 0.2103  loss_bbox: 0.1868
2023/06/10 11:59:40 - mmengine - INFO - Exp name: rtmdet_tiny_1xb12-40e_balloon_20230610_114823
2023/06/10 11:59:40 - mmengine - INFO - Epoch(train)  [92][2/2]  lr: 1.1615e-04  eta: 0:00:53  time: 3.0974  data_time: 1.3375  memory: 3953  loss: 0.3957  loss_cls: 0.2092  loss_bbox: 0.1865
2023/06/10 11:59:47 - mmengine - INFO - Exp name: rtmdet_tiny_1xb12-40e_balloon_20230610_114823
2023/06/10 11:59:47 - mmengine - INFO - Epoch(train)  [93][2/2]  lr: 1.0177e-04  eta: 0:00:46  time: 3.0765  data_time: 1.3208  memory: 3959  loss: 0.3949  loss_cls: 0.2089  loss_bbox: 0.1859
2023/06/10 11:59:55 - mmengine - INFO - Exp name: rtmdet_tiny_1xb12-40e_balloon_20230610_114823
2023/06/10 11:59:55 - mmengine - INFO - Epoch(train)  [94][2/2]  lr: 8.9067e-05  eta: 0:00:40  time: 3.0839  data_time: 1.3289  memory: 3953  loss: 0.3939  loss_cls: 0.2086  loss_bbox: 0.1852
2023/06/10 12:00:03 - mmengine - INFO - Exp name: rtmdet_tiny_1xb12-40e_balloon_20230610_114823
2023/06/10 12:00:03 - mmengine - INFO - Epoch(train)  [95][2/2]  lr: 7.8082e-05  eta: 0:00:33  time: 3.1285  data_time: 1.3388  memory: 3954  loss: 0.3930  loss_cls: 0.2080  loss_bbox: 0.1851
2023/06/10 12:00:03 - mmengine - INFO - Switch pipeline now!
2023/06/10 12:00:08 - mmengine - INFO - Exp name: rtmdet_tiny_1xb12-40e_balloon_20230610_114823
2023/06/10 12:00:08 - mmengine - INFO - Epoch(train)  [96][2/2]  lr: 6.8860e-05  eta: 0:00:26  time: 3.1539  data_time: 1.3138  memory: 3953  loss: 0.3872  loss_cls: 0.2049  loss_bbox: 0.1823
2023/06/10 12:00:13 - mmengine - INFO - Exp name: rtmdet_tiny_1xb12-40e_balloon_20230610_114823
2023/06/10 12:00:13 - mmengine - INFO - Epoch(train)  [97][2/2]  lr: 6.1440e-05  eta: 0:00:20  time: 3.1765  data_time: 1.2867  memory: 3953  loss: 0.3833  loss_cls: 0.2029  loss_bbox: 0.1804
2023/06/10 12:00:17 - mmengine - INFO - Exp name: rtmdet_tiny_1xb12-40e_balloon_20230610_114823
2023/06/10 12:00:17 - mmengine - INFO - Epoch(train)  [98][2/2]  lr: 5.5848e-05  eta: 0:00:13  time: 3.1884  data_time: 1.2551  memory: 3953  loss: 0.3798  loss_cls: 0.2014  loss_bbox: 0.1784
2023/06/10 12:00:22 - mmengine - INFO - Exp name: rtmdet_tiny_1xb12-40e_balloon_20230610_114823
2023/06/10 12:00:22 - mmengine - INFO - Epoch(train)  [99][2/2]  lr: 5.2108e-05  eta: 0:00:06  time: 3.1576  data_time: 1.2317  memory: 3953  loss: 0.3732  loss_cls: 0.1973  loss_bbox: 0.1759
2023/06/10 12:00:27 - mmengine - INFO - Exp name: rtmdet_tiny_1xb12-40e_balloon_20230610_114823
2023/06/10 12:00:27 - mmengine - INFO - Epoch(train) [100][2/2]  lr: 5.0234e-05  eta: 0:00:00  time: 3.1010  data_time: 1.2005  memory: 3953  loss: 0.3676  loss_cls: 0.1943  loss_bbox: 0.1733
2023/06/10 12:00:27 - mmengine - INFO - Saving checkpoint at 100 epochs
2023/06/10 12:00:30 - mmengine - INFO - Epoch(val) [100][ 5/13]    eta: 0:00:00  time: 0.0426  data_time: 0.0075  memory: 109  
2023/06/10 12:00:30 - mmengine - INFO - Epoch(val) [100][10/13]    eta: 0:00:00  time: 0.0429  data_time: 0.0075  memory: 109  
2023/06/10 12:00:30 - mmengine - INFO - Evaluating bbox...
2023/06/10 12:00:30 - mmengine - INFO - bbox_mAP_copypaste: 0.725 0.825 0.800 0.000 0.416 0.838
2023/06/10 12:00:30 - mmengine - INFO - Epoch(val) [100][13/13]    coco/bbox_mAP: 0.7250  coco/bbox_mAP_50: 0.8250  coco/bbox_mAP_75: 0.8000  coco/bbox_mAP_s: 0.0000  coco/bbox_mAP_m: 0.4160  coco/bbox_mAP_l: 0.8380  data_time: 0.0060  time: 0.0440
